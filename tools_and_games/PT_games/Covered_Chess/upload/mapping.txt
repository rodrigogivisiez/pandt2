com.potatoandtomato.games.CoveredChessGame -> com.potatoandtomato.games.CoveredChessGame:
    boolean _initialized -> a
    12:13:void <init>(java.lang.String,boolean) -> <init>
    17:19:void create() -> create
    23:52:void onReady() -> onReady
com.potatoandtomato.games.CoveredChessGame$1 -> com.potatoandtomato.games.CoveredChessGame$1:
    com.potatoandtomato.games.Entrance val$entrance -> a
    com.potatoandtomato.games.CoveredChessGame this$0 -> b
    28:28:void <init>(com.potatoandtomato.games.CoveredChessGame,com.potatoandtomato.games.Entrance) -> <init>
    31:48:void run() -> run
com.potatoandtomato.games.CoveredChessGame$1$1 -> com.potatoandtomato.games.CoveredChessGame$1$1:
    com.potatoandtomato.games.CoveredChessGame$1 this$1 -> a
    35:35:void <init>(com.potatoandtomato.games.CoveredChessGame$1) -> <init>
    38:44:void run() -> run
com.potatoandtomato.games.Entrance -> com.potatoandtomato.games.Entrance:
    com.potatoandtomato.games.screens.BoardLogic _logic -> a
    com.potatoandtomato.games.models.Services _services -> b
    com.potatoandtomato.games.assets.MyAssets _assets -> c
    com.potatoandtomato.common.GameCoordinator _coordinator -> d
    25:46:void <init>(com.potatoandtomato.common.GameCoordinator) -> <init>
    50:52:void init() -> init
    56:58:void onContinue() -> onContinue
    62:69:void dispose() -> dispose
    72:81:void initAssets() -> a
    84:84:com.potatoandtomato.games.assets.MyAssets getAssets() -> getAssets
com.potatoandtomato.games.Entrance$1 -> com.potatoandtomato.games.Entrance$1:
    com.potatoandtomato.games.Entrance this$0 -> a
    30:30:void <init>(com.potatoandtomato.games.Entrance) -> <init>
    33:43:void run() -> run
com.potatoandtomato.games.absint.ActionListener -> com.potatoandtomato.games.a.a:
    com.potatoandtomato.games.screens.TerrainLogic terrainLogic -> a
    11:11:void <init>() -> <init>
    16:17:void setTerrainLogic(com.potatoandtomato.games.screens.TerrainLogic) -> a
    20:20:com.potatoandtomato.games.screens.TerrainLogic getTerrainLogic() -> a
    void onSelected() -> b
    void onOpened() -> c
    void onMoved(int,int,int,int,boolean) -> a
    void changeTurnReady(com.potatoandtomato.games.enums.ActionType,com.potatoandtomato.games.enums.ChessType,com.potatoandtomato.games.enums.ChessType,java.lang.String) -> a
    void onChessKilled(com.potatoandtomato.games.enums.ChessType) -> a
com.potatoandtomato.games.absint.DatabaseListener -> com.potatoandtomato.games.a.b:
    java.lang.Class _type -> a
    13:15:void <init>() -> <init>
    17:19:void <init>(java.lang.Class) -> <init>
    22:22:java.lang.Class getType() -> a
    void onCallback(java.lang.Object,com.potatoandtomato.common.enums.Status) -> a
com.potatoandtomato.games.absint.IAssetFragment -> com.potatoandtomato.games.a.c:
    void load() -> a
    void onLoaded() -> b
com.potatoandtomato.games.absint.MainScreenListener -> com.potatoandtomato.games.a.d:
    9:9:void <init>() -> <init>
    void onChessKilled(com.potatoandtomato.games.enums.ChessType,com.badlogic.gdx.scenes.scene2d.utils.Drawable,boolean) -> a
    void onFinishAction(float) -> a
com.potatoandtomato.games.absint.Model -> com.potatoandtomato.games.a.e:
    9:9:void <init>() -> <init>
    13:18:java.lang.String toJson() -> a
com.potatoandtomato.games.absint.ScoresListener -> com.potatoandtomato.games.a.f:
    12:12:void <init>() -> <init>
    void onCallBack(java.util.HashMap,java.util.ArrayList) -> a
com.potatoandtomato.games.assets.Fonts -> com.potatoandtomato.games.assets.Fonts:
    15:16:void <init>(com.potatoandtomato.common.absints.PTAssetsManager) -> <init>
    20:23:void loadFonts() -> loadFonts
    27:28:void setFontDetailsGenerator() -> setFontDetailsGenerator
com.potatoandtomato.games.assets.Fonts$1 -> com.potatoandtomato.games.assets.Fonts$1:
    int[] $SwitchMap$com$potatoandtomato$games$assets$Fonts$FontName -> a
    int[] $SwitchMap$com$potatoandtomato$games$assets$Fonts$FontStyle -> b
    int[] $SwitchMap$com$potatoandtomato$games$assets$Fonts$FontSize -> c
    57:107:void <clinit>() -> <clinit>
com.potatoandtomato.games.assets.Fonts$FontId -> com.potatoandtomato.games.assets.Fonts$a:
    com.potatoandtomato.games.assets.Fonts$FontId MYRIAD_15_REGULAR -> a
    com.potatoandtomato.games.assets.Fonts$FontId MYRIAD_S_REGULAR -> b
    com.potatoandtomato.games.assets.Fonts$FontId MYRIAD_M_REGULAR -> c
    com.potatoandtomato.games.assets.Fonts$FontId MYRIAD_M_REGULAR_B_000000_588e54_1 -> d
    com.potatoandtomato.games.assets.Fonts$FontId MYRIAD_XXL_REGULAR -> e
    com.potatoandtomato.games.assets.Fonts$FontId HELVETICA_XS_BlACKCONDENSEDITALIC -> f
    com.potatoandtomato.games.assets.Fonts$FontId HELVETICA_XL_HEAVY -> g
    com.potatoandtomato.games.assets.Fonts$FontId HELVETICA_XXL_BlACKCONDENSEDITALIC_B_ffffff_56380a_1 -> h
    com.potatoandtomato.games.assets.Fonts$FontId HELVETICA_MAX_BlACKCONDENSEDITALIC_B_ffffff_f0c266_2_S_000000_1_1 -> i
    com.potatoandtomato.games.assets.Fonts$FontId HELVETICA_MAX_BlACKCONDENSEDITALIC_B_ffffff_f46767_2_S_000000_1_1 -> j
    com.potatoandtomato.games.assets.Fonts$FontId PIZZA_XXL_REGULAR -> k
    com.potatoandtomato.games.assets.Fonts$FontId PIZZA_XXXL_REGULAR_S_000000_2_2 -> l
    com.potatoandtomato.games.assets.Fonts$FontId[] $VALUES -> m
    31:31:com.potatoandtomato.games.assets.Fonts$FontId[] values() -> values
    31:31:com.potatoandtomato.games.assets.Fonts$FontId valueOf(java.lang.String) -> valueOf
    31:31:void <init>(java.lang.String,int) -> <init>
    31:45:void <clinit>() -> <clinit>
com.potatoandtomato.games.assets.Fonts$FontName -> com.potatoandtomato.games.assets.Fonts$b:
    com.potatoandtomato.games.assets.Fonts$FontName PIZZA -> a
    com.potatoandtomato.games.assets.Fonts$FontName MYRIAD -> b
    com.potatoandtomato.games.assets.Fonts$FontName HELVETICA -> c
    com.potatoandtomato.games.assets.Fonts$FontName HANDWRITING -> d
    com.potatoandtomato.games.assets.Fonts$FontName[] $VALUES -> e
    129:129:com.potatoandtomato.games.assets.Fonts$FontName[] values() -> values
    129:129:com.potatoandtomato.games.assets.Fonts$FontName valueOf(java.lang.String) -> valueOf
    129:129:void <init>(java.lang.String,int) -> <init>
    129:130:void <clinit>() -> <clinit>
com.potatoandtomato.games.assets.Fonts$FontSize -> com.potatoandtomato.games.assets.Fonts$c:
    com.potatoandtomato.games.assets.Fonts$FontSize XS -> a
    com.potatoandtomato.games.assets.Fonts$FontSize S -> b
    com.potatoandtomato.games.assets.Fonts$FontSize M -> c
    com.potatoandtomato.games.assets.Fonts$FontSize L -> d
    com.potatoandtomato.games.assets.Fonts$FontSize XL -> e
    com.potatoandtomato.games.assets.Fonts$FontSize XXL -> f
    com.potatoandtomato.games.assets.Fonts$FontSize XXXL -> g
    com.potatoandtomato.games.assets.Fonts$FontSize MAX -> h
    com.potatoandtomato.games.assets.Fonts$FontSize[] $VALUES -> i
    137:137:com.potatoandtomato.games.assets.Fonts$FontSize[] values() -> values
    137:137:com.potatoandtomato.games.assets.Fonts$FontSize valueOf(java.lang.String) -> valueOf
    137:137:void <init>(java.lang.String,int) -> <init>
    137:138:void <clinit>() -> <clinit>
com.potatoandtomato.games.assets.Fonts$FontStyle -> com.potatoandtomato.games.assets.Fonts$d:
    com.potatoandtomato.games.assets.Fonts$FontStyle SEMIBOLD -> a
    com.potatoandtomato.games.assets.Fonts$FontStyle REGULAR -> b
    com.potatoandtomato.games.assets.Fonts$FontStyle BOLD -> c
    com.potatoandtomato.games.assets.Fonts$FontStyle CONDENSED -> d
    com.potatoandtomato.games.assets.Fonts$FontStyle ITALIC -> e
    com.potatoandtomato.games.assets.Fonts$FontStyle HEAVY -> f
    com.potatoandtomato.games.assets.Fonts$FontStyle BlACKCONDENSEDITALIC -> g
    com.potatoandtomato.games.assets.Fonts$FontStyle[] $VALUES -> h
    133:133:com.potatoandtomato.games.assets.Fonts$FontStyle[] values() -> values
    133:133:com.potatoandtomato.games.assets.Fonts$FontStyle valueOf(java.lang.String) -> valueOf
    133:133:void <init>(java.lang.String,int) -> <init>
    133:134:void <clinit>() -> <clinit>
com.potatoandtomato.games.assets.Fonts$MyFontDetailsGenerator -> com.potatoandtomato.games.assets.Fonts$MyFontDetailsGenerator:
    com.potatoandtomato.games.assets.Fonts this$0 -> a
    49:49:void <init>(com.potatoandtomato.games.assets.Fonts) -> <init>
    53:97:java.lang.String getPath(java.lang.String,java.lang.String) -> getPath
    102:125:int getSize(java.lang.String) -> getSize
    49:49:void <init>(com.potatoandtomato.games.assets.Fonts,com.potatoandtomato.games.assets.Fonts$1) -> <init>
com.potatoandtomato.games.assets.MyAssets -> com.potatoandtomato.games.assets.MyAssets:
    com.potatoandtomato.games.assets.Textures textures -> a
    16:18:void <init>(com.potatoandtomato.common.absints.PTAssetsManager,com.potatoandtomato.common.assets.FontAssets,com.potatoandtomato.common.assets.AnimationAssets,com.potatoandtomato.common.assets.SoundAssets,com.potatoandtomato.common.assets.PatchAssets,com.potatoandtomato.games.assets.Textures) -> <init>
    22:22:com.potatoandtomato.games.assets.Textures getTextures() -> a
    10:10:com.potatoandtomato.common.assets.TextureAssets getTextures() -> getTextures
com.potatoandtomato.games.assets.Patches -> com.potatoandtomato.games.assets.Patches:
    12:13:void <init>(com.potatoandtomato.common.absints.PTAssetsManager) -> <init>
com.potatoandtomato.games.assets.Patches$Name -> com.potatoandtomato.games.assets.Patches$a:
    com.potatoandtomato.games.assets.Patches$Name YELLOW_GRADIENT_BOX -> a
    com.potatoandtomato.games.assets.Patches$Name[] $VALUES -> b
    15:15:com.potatoandtomato.games.assets.Patches$Name[] values() -> values
    15:15:com.potatoandtomato.games.assets.Patches$Name valueOf(java.lang.String) -> valueOf
    15:15:void <init>(java.lang.String,int) -> <init>
    15:16:void <clinit>() -> <clinit>
com.potatoandtomato.games.assets.Sounds -> com.potatoandtomato.games.assets.Sounds:
    13:14:void <init>(com.potatoandtomato.common.absints.PTAssetsManager) -> <init>
com.potatoandtomato.games.assets.Sounds$Name -> com.potatoandtomato.games.assets.Sounds$a:
    com.potatoandtomato.games.assets.Sounds$Name START_GAME -> a
    com.potatoandtomato.games.assets.Sounds$Name OPEN_SLIDE -> b
    com.potatoandtomato.games.assets.Sounds$Name FLIP_CHESS -> c
    com.potatoandtomato.games.assets.Sounds$Name MOVE_CHESS -> d
    com.potatoandtomato.games.assets.Sounds$Name FIGHT_CHESS -> e
    com.potatoandtomato.games.assets.Sounds$Name WIN -> f
    com.potatoandtomato.games.assets.Sounds$Name LOSE -> g
    com.potatoandtomato.games.assets.Sounds$Name GLASS_CRACKING -> h
    com.potatoandtomato.games.assets.Sounds$Name GLASS_BROKEN -> i
    com.potatoandtomato.games.assets.Sounds$Name DROPPING -> j
    com.potatoandtomato.games.assets.Sounds$Name THEME_MUSIC -> k
    com.potatoandtomato.games.assets.Sounds$Name THUNDER -> l
    com.potatoandtomato.games.assets.Sounds$Name THEME_SUDDEN_D_MUSIC -> m
    com.potatoandtomato.games.assets.Sounds$Name PARALYZED -> n
    com.potatoandtomato.games.assets.Sounds$Name POISON -> o
    com.potatoandtomato.games.assets.Sounds$Name ANGRY -> p
    com.potatoandtomato.games.assets.Sounds$Name DECREASE -> q
    com.potatoandtomato.games.assets.Sounds$Name KING -> r
    com.potatoandtomato.games.assets.Sounds$Name HEAL -> s
    com.potatoandtomato.games.assets.Sounds$Name DEFEND_SUCCESS -> t
    com.potatoandtomato.games.assets.Sounds$Name[] $VALUES -> u
    16:16:com.potatoandtomato.games.assets.Sounds$Name[] values() -> values
    16:16:com.potatoandtomato.games.assets.Sounds$Name valueOf(java.lang.String) -> valueOf
    16:16:void <init>(java.lang.String,int) -> <init>
    16:22:void <clinit>() -> <clinit>
com.potatoandtomato.games.assets.Textures -> com.potatoandtomato.games.assets.Textures:
    16:17:void <init>(com.potatoandtomato.common.absints.PTAssetsManager,java.lang.String) -> <init>
    20:21:com.badlogic.gdx.graphics.g2d.TextureRegion getAnimalByType(com.potatoandtomato.games.enums.ChessType) -> a
    26:26:com.badlogic.gdx.graphics.g2d.TextureRegion getStatus(com.potatoandtomato.games.enums.Status) -> a
com.potatoandtomato.games.assets.Textures$Name -> com.potatoandtomato.games.assets.Textures$a:
    com.potatoandtomato.games.assets.Textures$Name ARROW_DOWN -> a
    com.potatoandtomato.games.assets.Textures$Name ARROW_LEFT -> b
    com.potatoandtomato.games.assets.Textures$Name ARROW_RIGHT -> c
    com.potatoandtomato.games.assets.Textures$Name ARROW_UP -> d
    com.potatoandtomato.games.assets.Textures$Name ARROW_BOTTOM_LEFT -> e
    com.potatoandtomato.games.assets.Textures$Name ARROW_TOP_LEFT -> f
    com.potatoandtomato.games.assets.Textures$Name ARROW_BOTTOM_RIGHT -> g
    com.potatoandtomato.games.assets.Textures$Name ARROW_TOP_RIGHT -> h
    com.potatoandtomato.games.assets.Textures$Name GREEN_TILE -> i
    com.potatoandtomato.games.assets.Textures$Name RED_TILE -> j
    com.potatoandtomato.games.assets.Textures$Name GLOWING_TILE -> k
    com.potatoandtomato.games.assets.Textures$Name SUDDEN_DEATH_GAME_BG -> l
    com.potatoandtomato.games.assets.Textures$Name GAME_BG -> m
    com.potatoandtomato.games.assets.Textures$Name TRANS_DARK_BROWN_ROUNDED_BG -> n
    com.potatoandtomato.games.assets.Textures$Name GRAVE_BG -> o
    com.potatoandtomato.games.assets.Textures$Name TRANS_BLACK_BG -> p
    com.potatoandtomato.games.assets.Textures$Name BLACK_BG -> q
    com.potatoandtomato.games.assets.Textures$Name SPLASH_BG -> r
    com.potatoandtomato.games.assets.Textures$Name FULL_BLACK -> s
    com.potatoandtomato.games.assets.Textures$Name POINT_LEFT_ICON -> t
    com.potatoandtomato.games.assets.Textures$Name POINT_RIGHT_ICON -> u
    com.potatoandtomato.games.assets.Textures$Name PREVIEW_ICON -> v
    com.potatoandtomato.games.assets.Textures$Name GRAVE_ICON -> w
    com.potatoandtomato.games.assets.Textures$Name TUTORIAL_ICON -> x
    com.potatoandtomato.games.assets.Textures$Name CLOSE_ICON -> y
    com.potatoandtomato.games.assets.Textures$Name GLOW_CHESS -> z
    com.potatoandtomato.games.assets.Textures$Name RED_CHESS_TOTAL -> A
    com.potatoandtomato.games.assets.Textures$Name YELLOW_CHESS_TOTAL -> B
    com.potatoandtomato.games.assets.Textures$Name CHESS_SHIELD -> C
    com.potatoandtomato.games.assets.Textures$Name STAR -> D
    com.potatoandtomato.games.assets.Textures$Name BATTLE_EFFECT -> E
    com.potatoandtomato.games.assets.Textures$Name BATTLE_CLOUD -> F
    com.potatoandtomato.games.assets.Textures$Name EMPTY -> G
    com.potatoandtomato.games.assets.Textures$Name YELLOW_CHESS -> H
    com.potatoandtomato.games.assets.Textures$Name RED_CHESS -> I
    com.potatoandtomato.games.assets.Textures$Name UNKNOWN_CHESS -> J
    com.potatoandtomato.games.assets.Textures$Name YELLOW_CHESS_SELECTED -> K
    com.potatoandtomato.games.assets.Textures$Name RED_CHESS_SELECTED -> L
    com.potatoandtomato.games.assets.Textures$Name UNKNOWN_CHESS_SELECTED -> M
    com.potatoandtomato.games.assets.Textures$Name PREVIEW_CHESS -> N
    com.potatoandtomato.games.assets.Textures$Name YELLOW_LION_SPLASH -> O
    com.potatoandtomato.games.assets.Textures$Name RED_LION_SPLASH -> P
    com.potatoandtomato.games.assets.Textures$Name YELLOW_TIGER_SPLASH -> Q
    com.potatoandtomato.games.assets.Textures$Name RED_TIGER_SPLASH -> R
    com.potatoandtomato.games.assets.Textures$Name YELLOW_WOLF_SPLASH -> S
    com.potatoandtomato.games.assets.Textures$Name RED_WOLF_SPLASH -> T
    com.potatoandtomato.games.assets.Textures$Name CRACK -> U
    com.potatoandtomato.games.assets.Textures$Name YOU_LOSE_YELLOW -> V
    com.potatoandtomato.games.assets.Textures$Name YOU_WIN_YELLOW -> W
    com.potatoandtomato.games.assets.Textures$Name YOU_LOSE_RED -> X
    com.potatoandtomato.games.assets.Textures$Name YOU_WIN_RED -> Y
    com.potatoandtomato.games.assets.Textures$Name TUTORIAL_BG -> Z
    com.potatoandtomato.games.assets.Textures$Name FOOD_CHAIN -> aa
    com.potatoandtomato.games.assets.Textures$Name GREY_HORIZONTAL_LINE -> ab
    com.potatoandtomato.games.assets.Textures$Name SWIPE_TO_OPEN -> ac
    com.potatoandtomato.games.assets.Textures$Name DRAG_TUTORIAL -> ad
    com.potatoandtomato.games.assets.Textures$Name MOUSE_TUTORIAL -> ae
    com.potatoandtomato.games.assets.Textures$Name CAT_TUTORIAL -> af
    com.potatoandtomato.games.assets.Textures$Name DOG_TUTORIAL -> ag
    com.potatoandtomato.games.assets.Textures$Name WOLF_TUTORIAL -> ah
    com.potatoandtomato.games.assets.Textures$Name TIGER_TUTORIAL -> ai
    com.potatoandtomato.games.assets.Textures$Name LION_TUTORIAL -> aj
    com.potatoandtomato.games.assets.Textures$Name ELEPHANT_TUTORIAL -> ak
    com.potatoandtomato.games.assets.Textures$Name[] $VALUES -> al
    29:29:com.potatoandtomato.games.assets.Textures$Name[] values() -> values
    29:29:com.potatoandtomato.games.assets.Textures$Name valueOf(java.lang.String) -> valueOf
    29:29:void <init>(java.lang.String,int) -> <init>
    29:43:void <clinit>() -> <clinit>
com.potatoandtomato.games.bots.Bot -> com.potatoandtomato.games.b.a:
    boolean enabled -> a
    com.potatoandtomato.games.helpers.RoomMsgHandler roomMsgHandler -> b
    com.potatoandtomato.games.enums.ChessColor botChessColor -> c
    boolean disposed -> d
    31:33:void <init>(com.potatoandtomato.games.helpers.RoomMsgHandler) -> <init>
    36:38:void start(com.potatoandtomato.games.enums.ChessColor) -> a
    45:79:void requestMove(java.util.ArrayList,com.potatoandtomato.games.models.GraveModel,com.potatoandtomato.games.models.BoardModel,com.potatoandtomato.games.references.BattleRef,com.potatoandtomato.games.references.MovementRef,com.potatoandtomato.games.references.StatusRef) -> a
    82:86:void openChess(com.potatoandtomato.games.screens.TerrainLogic,com.potatoandtomato.games.models.GraveModel) -> a
    89:101:void moveChess(com.potatoandtomato.games.screens.TerrainLogic,com.potatoandtomato.games.screens.TerrainLogic,com.potatoandtomato.games.references.BattleRef,com.potatoandtomato.games.models.GraveModel) -> a
    105:105:boolean isEnabled() -> a
    109:109:java.lang.String getBotUserId() -> b
    114:115:void dispose() -> dispose
    24:24:boolean access$000(com.potatoandtomato.games.bots.Bot) -> a
    24:24:void access$100(com.potatoandtomato.games.bots.Bot,com.potatoandtomato.games.screens.TerrainLogic,com.potatoandtomato.games.models.GraveModel) -> a
com.potatoandtomato.games.bots.Bot$1 -> com.potatoandtomato.games.b.a$1:
    java.util.ArrayList val$terrainLogics -> a
    com.potatoandtomato.games.models.GraveModel val$graveModel -> b
    com.potatoandtomato.games.bots.Bot this$0 -> c
    45:45:void <init>(com.potatoandtomato.games.bots.Bot,java.util.ArrayList,com.potatoandtomato.games.models.GraveModel) -> <init>
    49:77:void run() -> run
com.potatoandtomato.games.controls.AnimateLabel -> com.potatoandtomato.games.c.a:
    18:45:void <init>(java.lang.String,com.badlogic.gdx.graphics.g2d.BitmapFont) -> <init>
com.potatoandtomato.games.controls.CloneableTable -> com.potatoandtomato.games.c.b:
    10:10:void <init>() -> <init>
    13:25:com.badlogic.gdx.scenes.scene2d.ui.Table clone() -> a
    10:10:java.lang.Object clone() -> clone
com.potatoandtomato.games.controls.DummyButton -> com.potatoandtomato.games.c.c:
    15:18:void <init>(com.badlogic.gdx.scenes.scene2d.ui.Table,com.potatoandtomato.common.assets.Assets) -> <init>
com.potatoandtomato.games.enums.ActionType -> com.potatoandtomato.games.enums.ActionType:
    com.potatoandtomato.games.enums.ActionType OPEN -> a
    com.potatoandtomato.games.enums.ActionType MOVE -> b
    com.potatoandtomato.games.enums.ActionType SKIP -> c
    com.potatoandtomato.games.enums.ActionType[] $VALUES -> d
    6:6:com.potatoandtomato.games.enums.ActionType[] values() -> values
    6:6:com.potatoandtomato.games.enums.ActionType valueOf(java.lang.String) -> valueOf
    6:6:void <init>(java.lang.String,int) -> <init>
    6:8:void <clinit>() -> <clinit>
com.potatoandtomato.games.enums.ChessAnimal -> com.potatoandtomato.games.enums.ChessAnimal:
    com.potatoandtomato.games.enums.ChessAnimal MOUSE -> a
    com.potatoandtomato.games.enums.ChessAnimal CAT -> b
    com.potatoandtomato.games.enums.ChessAnimal DOG -> c
    com.potatoandtomato.games.enums.ChessAnimal WOLF -> d
    com.potatoandtomato.games.enums.ChessAnimal TIGER -> e
    com.potatoandtomato.games.enums.ChessAnimal LION -> f
    com.potatoandtomato.games.enums.ChessAnimal ELEPHANT -> g
    com.potatoandtomato.games.enums.ChessAnimal NONE -> h
    com.potatoandtomato.games.enums.ChessAnimal[] $VALUES -> i
    6:6:com.potatoandtomato.games.enums.ChessAnimal[] values() -> values
    6:6:com.potatoandtomato.games.enums.ChessAnimal valueOf(java.lang.String) -> valueOf
    6:6:void <init>(java.lang.String,int) -> <init>
    6:14:void <clinit>() -> <clinit>
com.potatoandtomato.games.enums.ChessColor -> com.potatoandtomato.games.enums.ChessColor:
    com.potatoandtomato.games.enums.ChessColor RED -> a
    com.potatoandtomato.games.enums.ChessColor YELLOW -> b
    com.potatoandtomato.games.enums.ChessColor[] $VALUES -> c
    6:6:com.potatoandtomato.games.enums.ChessColor[] values() -> values
    6:6:com.potatoandtomato.games.enums.ChessColor valueOf(java.lang.String) -> valueOf
    6:6:void <init>(java.lang.String,int) -> <init>
    6:8:void <clinit>() -> <clinit>
com.potatoandtomato.games.enums.ChessType -> com.potatoandtomato.games.enums.ChessType:
    com.potatoandtomato.games.enums.ChessType UNKNOWN -> a
    com.potatoandtomato.games.enums.ChessType RED_MOUSE -> b
    com.potatoandtomato.games.enums.ChessType RED_CAT -> c
    com.potatoandtomato.games.enums.ChessType RED_DOG -> d
    com.potatoandtomato.games.enums.ChessType RED_WOLF -> e
    com.potatoandtomato.games.enums.ChessType RED_TIGER -> f
    com.potatoandtomato.games.enums.ChessType RED_LION -> g
    com.potatoandtomato.games.enums.ChessType RED_ELEPHANT -> h
    com.potatoandtomato.games.enums.ChessType YELLOW_MOUSE -> i
    com.potatoandtomato.games.enums.ChessType YELLOW_CAT -> j
    com.potatoandtomato.games.enums.ChessType YELLOW_DOG -> k
    com.potatoandtomato.games.enums.ChessType YELLOW_WOLF -> l
    com.potatoandtomato.games.enums.ChessType YELLOW_TIGER -> m
    com.potatoandtomato.games.enums.ChessType YELLOW_LION -> n
    com.potatoandtomato.games.enums.ChessType YELLOW_ELEPHANT -> o
    com.potatoandtomato.games.enums.ChessType NONE -> p
    com.potatoandtomato.games.enums.ChessType[] $VALUES -> q
    6:6:com.potatoandtomato.games.enums.ChessType[] values() -> values
    6:6:com.potatoandtomato.games.enums.ChessType valueOf(java.lang.String) -> valueOf
    6:6:void <init>(java.lang.String,int) -> <init>
    28:34:com.potatoandtomato.games.enums.ChessAnimal toChessAnimal() -> a
    6:23:void <clinit>() -> <clinit>
com.potatoandtomato.games.enums.Direction -> com.potatoandtomato.games.enums.Direction:
    com.potatoandtomato.games.enums.Direction TOP_LEFT -> a
    com.potatoandtomato.games.enums.Direction TOP_RIGHT -> b
    com.potatoandtomato.games.enums.Direction BOTTOM_LEFT -> c
    com.potatoandtomato.games.enums.Direction BOTTOM_RIGHT -> d
    com.potatoandtomato.games.enums.Direction TOP -> e
    com.potatoandtomato.games.enums.Direction LEFT -> f
    com.potatoandtomato.games.enums.Direction BOTTOM -> g
    com.potatoandtomato.games.enums.Direction RIGHT -> h
    com.potatoandtomato.games.enums.Direction NONE -> i
    com.potatoandtomato.games.enums.Direction[] $VALUES -> j
    6:6:com.potatoandtomato.games.enums.Direction[] values() -> values
    6:6:com.potatoandtomato.games.enums.Direction valueOf(java.lang.String) -> valueOf
    6:6:void <init>(java.lang.String,int) -> <init>
    6:16:void <clinit>() -> <clinit>
com.potatoandtomato.games.enums.Status -> com.potatoandtomato.games.enums.Status:
    com.potatoandtomato.games.enums.Status POISON -> a
    com.potatoandtomato.games.enums.Status VENGEFUL -> b
    com.potatoandtomato.games.enums.Status KING -> c
    com.potatoandtomato.games.enums.Status DECREASE -> d
    com.potatoandtomato.games.enums.Status ANGRY -> e
    com.potatoandtomato.games.enums.Status PARALYZED -> f
    com.potatoandtomato.games.enums.Status INJURED -> g
    com.potatoandtomato.games.enums.Status NONE -> h
    com.potatoandtomato.games.enums.Status[] $VALUES -> i
    6:6:com.potatoandtomato.games.enums.Status[] values() -> values
    6:6:com.potatoandtomato.games.enums.Status valueOf(java.lang.String) -> valueOf
    6:6:void <init>(java.lang.String,int) -> <init>
    6:14:void <clinit>() -> <clinit>
com.potatoandtomato.games.helpers.ArrayLists -> com.potatoandtomato.games.helpers.a:
    11:11:void <init>() -> <init>
    14:18:java.util.ArrayList randomNumericArray(int,int,int) -> a
com.potatoandtomato.games.helpers.GameDataContract -> com.potatoandtomato.games.helpers.GameDataContract:
    com.potatoandtomato.games.services.GameDataController gameDataController -> a
    com.potatoandtomato.games.screens.BoardLogic boardLogic -> b
    24:27:void <init>(com.potatoandtomato.games.services.GameDataController,com.potatoandtomato.games.screens.BoardLogic) -> <init>
    31:42:java.lang.String generateGameData() -> generateGameData
    47:56:java.lang.String getCurrentGameData() -> getCurrentGameData
    61:62:void onGameDataOutdated() -> onGameDataOutdated
    68:82:void onGameDataReceived(java.lang.String) -> onGameDataReceived
com.potatoandtomato.games.helpers.Logs -> com.potatoandtomato.games.helpers.b:
    8:8:void <init>() -> <init>
    11:12:void show(java.lang.String) -> a
com.potatoandtomato.games.helpers.Positions -> com.potatoandtomato.games.helpers.c:
    9:9:void <init>() -> <init>
    12:12:float centerY(float,float) -> a
    16:16:float centerX(float,float) -> b
    20:22:com.badlogic.gdx.math.Vector2 actorLocalToStageCoord(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.potatoandtomato.games.helpers.RoomMsgHandler -> com.potatoandtomato.games.helpers.d:
    com.potatoandtomato.games.helpers.UpdateRoomHelper updateRoomHelper -> a
    com.potatoandtomato.games.screens.BoardLogic _boardLogic -> b
    com.potatoandtomato.common.GameCoordinator _coordinator -> c
    java.util.ArrayList _messagesQueue -> d
    boolean _gameScreenReady -> e
    23:36:void <init>(com.potatoandtomato.games.screens.BoardLogic,com.potatoandtomato.common.GameCoordinator) -> <init>
    40:125:void receivedInGameUpdate(java.lang.String,java.lang.String) -> a
    128:130:void skipTurn(java.lang.String,int) -> a
    133:135:void sendTerrainSelected(java.lang.String,int,int,int) -> a
    138:140:void sendChessOpenFull(java.lang.String,int,int,java.lang.String,int) -> a
    143:146:void sendMoveChess(java.lang.String,int,int,int,int,boolean,java.lang.String,int) -> a
    149:151:void sendSurrender(java.lang.String) -> a
    155:161:void onGameReady() -> a
    15:15:com.potatoandtomato.games.screens.BoardLogic access$000(com.potatoandtomato.games.helpers.RoomMsgHandler) -> a
com.potatoandtomato.games.helpers.RoomMsgHandler$1 -> com.potatoandtomato.games.helpers.RoomMsgHandler$1:
    com.potatoandtomato.games.helpers.RoomMsgHandler this$0 -> a
    29:29:void <init>(com.potatoandtomato.games.helpers.RoomMsgHandler) -> <init>
    32:33:void onUpdateReceived(java.lang.String,java.lang.String) -> onUpdateReceived
com.potatoandtomato.games.helpers.RoomMsgHandler$2 -> com.potatoandtomato.games.helpers.d$1:
    java.lang.String val$msg -> a
    java.lang.String val$senderId -> b
    com.potatoandtomato.games.helpers.RoomMsgHandler this$0 -> c
    61:61:void <init>(com.potatoandtomato.games.helpers.RoomMsgHandler,java.lang.String,java.lang.String) -> <init>
    64:65:void run() -> run
com.potatoandtomato.games.helpers.RoomMsgHandler$3 -> com.potatoandtomato.games.helpers.d$2:
    java.lang.String[] val$arr -> a
    com.potatoandtomato.games.helpers.RoomMsgHandler this$0 -> b
    76:76:void <init>(com.potatoandtomato.games.helpers.RoomMsgHandler,java.lang.String[]) -> <init>
    79:80:void run() -> run
com.potatoandtomato.games.helpers.RoomMsgHandler$4 -> com.potatoandtomato.games.helpers.d$3:
    java.lang.String[] val$arr -> a
    java.lang.String val$randomString -> b
    com.potatoandtomato.games.helpers.RoomMsgHandler this$0 -> c
    87:87:void <init>(com.potatoandtomato.games.helpers.RoomMsgHandler,java.lang.String[],java.lang.String) -> <init>
    90:91:void run() -> run
com.potatoandtomato.games.helpers.RoomMsgHandler$5 -> com.potatoandtomato.games.helpers.d$4:
    java.lang.String[] val$from -> a
    java.lang.String[] val$to -> b
    boolean val$isFromWon -> c
    java.lang.String val$random -> d
    com.potatoandtomato.games.helpers.RoomMsgHandler this$0 -> e
    100:100:void <init>(com.potatoandtomato.games.helpers.RoomMsgHandler,java.lang.String[],java.lang.String[],boolean,java.lang.String) -> <init>
    103:105:void run() -> run
com.potatoandtomato.games.helpers.RoomMsgHandler$6 -> com.potatoandtomato.games.helpers.d$5:
    com.potatoandtomato.games.helpers.RoomMsgHandler this$0 -> a
    109:109:void <init>(com.potatoandtomato.games.helpers.RoomMsgHandler) -> <init>
    112:113:void run() -> run
com.potatoandtomato.games.helpers.RoomMsgHandler$7 -> com.potatoandtomato.games.helpers.d$6:
    com.potatoandtomato.games.helpers.RoomMsgHandler this$0 -> a
    117:117:void <init>(com.potatoandtomato.games.helpers.RoomMsgHandler) -> <init>
    120:121:void run() -> run
com.potatoandtomato.games.helpers.Sizes -> com.potatoandtomato.games.helpers.e:
    9:9:void <init>() -> <init>
    12:13:com.badlogic.gdx.math.Vector2 resize(float,com.badlogic.gdx.graphics.g2d.TextureRegion) -> a
    17:18:com.badlogic.gdx.math.Vector2 resizeByH(float,com.badlogic.gdx.graphics.g2d.TextureRegion) -> b
com.potatoandtomato.games.helpers.Terrains -> com.potatoandtomato.games.helpers.f:
    10:10:void <init>() -> <init>
    13:18:com.potatoandtomato.games.screens.TerrainLogic getTerrainLogicByPosition(java.util.ArrayList,int,int) -> a
com.potatoandtomato.games.helpers.TutorialsHelper -> com.potatoandtomato.games.helpers.TutorialsHelper:
    com.potatoandtomato.games.helpers.TutorialsHelper _this -> a
    com.potatoandtomato.common.GameCoordinator coordinator -> b
    com.potatoandtomato.games.services.Texts texts -> c
    boolean completeMoveTutorial -> d
    boolean completeOpenTutorial -> e
    boolean completeConcludeTutorial -> f
    boolean completeIntroductionTutorial -> g
    com.potatoandtomato.games.screens.TerrainLogic suggestOpenTerrainLogic -> h
    com.potatoandtomato.games.screens.TerrainLogic suggestMoveTerrainLogicFrom -> i
    com.potatoandtomato.games.screens.TerrainLogic suggestMoveTerrainLogicTo -> j
    boolean closeOnNext -> k
    boolean disposed -> l
    com.potatoandtomato.games.screens.GraveyardLogic graveyardLogic -> m
    int tutorialStep -> n
    35:42:void <init>(com.potatoandtomato.games.screens.GraveyardLogic,com.potatoandtomato.common.GameCoordinator,com.potatoandtomato.games.services.Texts) -> <init>
    45:52:void check() -> a
    55:59:void start() -> b
    62:97:void switchedToMyTurn(com.potatoandtomato.games.enums.ChessColor,java.util.ArrayList,com.potatoandtomato.games.references.MovementRef) -> a
    102:143:void nextTutorial() -> nextTutorial
com.potatoandtomato.games.helpers.UpdateCode -> com.potatoandtomato.games.helpers.g:
    int TERRAIN_SELECTED -> a
    int CHESS_OPEN_FULL -> b
    int CHESS_MOVE -> c
    int SKIP_TURN -> d
    int SURRENDER -> e
    int GAME_DATA -> f
    6:6:void <init>() -> <init>
com.potatoandtomato.games.helpers.UpdateRoomHelper -> com.potatoandtomato.games.helpers.h:
    com.shaded.fasterxml.jackson.databind.ObjectMapper objectMapper -> a
    16:18:void <init>() -> <init>
    21:27:java.util.HashMap jsonToMap(java.lang.String) -> a
    31:43:java.lang.String convertToJson(java.lang.String,int,java.lang.String) -> a
com.potatoandtomato.games.models.BoardModel -> com.potatoandtomato.games.d.a:
    int currentTurnIndex -> a
    int accTurnCount -> b
    boolean suddenDeath -> c
    21:22:void <init>() -> <init>
    24:27:void <init>(int) -> <init>
    30:30:int getAccTurnCount() -> getAccTurnCount
    34:35:void setAccTurnCount(int) -> setAccTurnCount
    38:38:int getCurrentTurnIndex() -> getCurrentTurnIndex
    42:43:void setCurrentTurnIndex(int) -> setCurrentTurnIndex
    46:46:boolean checkExceedSuddenDeathNumber(int) -> a
    50:50:boolean isSuddenDeath() -> b
    54:54:boolean nextTurnIsSuddenDeath() -> c
    58:59:void setSuddenDeath(boolean) -> setSuddenDeath
    62:62:boolean isCrackStarting() -> d
    66:66:boolean isCrackHappened() -> e
    70:70:com.potatoandtomato.games.enums.ChessColor getCurrentTurnChessColor() -> getCurrentTurnChessColor
    74:76:void switchTurnIndex() -> f
com.potatoandtomato.games.models.ChessModel -> com.potatoandtomato.games.d.b:
    com.potatoandtomato.games.enums.ChessType chessType -> a
    boolean opened -> b
    boolean selected -> c
    boolean dragging -> d
    boolean focusing -> e
    com.potatoandtomato.games.enums.Status status -> f
    int statusTurn -> g
    int killCount -> h
    25:27:void <init>() -> <init>
    29:32:void <init>(com.potatoandtomato.games.enums.ChessType) -> <init>
    35:35:int getKillCount() -> getKillCount
    39:40:void setKillCount(int) -> setKillCount
    43:44:void addKillCount() -> b
    47:47:boolean canTransform() -> c
    51:51:com.potatoandtomato.games.enums.Status getStatus() -> getStatus
    55:57:void setStatus(com.potatoandtomato.games.enums.Status) -> setStatus
    60:60:int getStatusTurn() -> getStatusTurn
    64:65:void setStatusTurn(int) -> setStatusTurn
    68:69:void addStatusTurn() -> d
    72:72:com.potatoandtomato.games.enums.ChessType getChessType() -> getChessType
    76:77:void setChessType(com.potatoandtomato.games.enums.ChessType) -> setChessType
    80:80:boolean getOpened() -> getOpened
    84:85:void setOpened(boolean) -> setOpened
    88:88:boolean getSelected() -> getSelected
    92:93:void setSelected(boolean) -> setSelected
    95:95:boolean isYellow() -> e
    97:97:boolean isRed() -> f
    100:101:com.potatoandtomato.games.enums.ChessColor getChessColor() -> getChessColor
    105:105:boolean getDragging() -> getDragging
    109:110:void setDragging(boolean) -> setDragging
    113:113:boolean getFocusing() -> getFocusing
    117:118:void setFocusing(boolean) -> setFocusing
    121:124:com.potatoandtomato.games.enums.ChessAnimal getChessAnimal() -> getChessAnimal
    128:136:com.potatoandtomato.games.models.ChessModel clone() -> g
    140:143:void resetSurface() -> h
    13:13:java.lang.Object clone() -> clone
com.potatoandtomato.games.models.GraveModel -> com.potatoandtomato.games.d.c:
    java.util.ArrayList graveChesses -> a
    int yellowLeftTime -> b
    int redLeftTime -> c
    21:24:void <init>() -> <init>
    27:27:int getRedLeftTime() -> getRedLeftTime
    31:32:void setRedLeftTime(int) -> setRedLeftTime
    35:35:int getYellowLeftTime() -> getYellowLeftTime
    39:40:void setYellowLeftTime(int) -> setYellowLeftTime
    43:51:void minusTimeLeft(com.potatoandtomato.games.enums.ChessColor) -> a
    54:55:java.lang.Integer getLeftTimeInt(com.potatoandtomato.games.enums.ChessColor) -> getLeftTimeInt
    59:63:java.lang.String getLeftTime(com.potatoandtomato.games.enums.ChessColor) -> getLeftTime
    66:68:void <init>(java.util.ArrayList) -> <init>
    71:71:java.util.ArrayList getGraveChesses() -> getGraveChesses
    75:76:void setGraveChesses(java.util.ArrayList) -> setGraveChesses
    79:81:void addToGrave(com.potatoandtomato.games.enums.ChessType) -> a
    84:95:int getLeftChessCountByColor(com.potatoandtomato.games.enums.ChessColor) -> getLeftChessCountByColor
com.potatoandtomato.games.models.MatchHistory -> com.potatoandtomato.games.d.d:
    java.lang.String opponentUserId -> a
    boolean won -> b
    11:12:void <init>() -> <init>
    14:17:void <init>(java.lang.String,boolean) -> <init>
    20:20:java.lang.String getOpponentUserId() -> getOpponentUserId
    24:25:void setOpponentUserId(java.lang.String) -> setOpponentUserId
    28:28:boolean isWon() -> a
    32:33:void setWon(boolean) -> setWon
com.potatoandtomato.games.models.Services -> com.potatoandtomato.games.d.e:
    com.potatoandtomato.games.assets.MyAssets assets -> a
    com.potatoandtomato.games.services.Texts texts -> b
    com.potatoandtomato.games.services.SoundsWrapper soundsWrapper -> c
    com.potatoandtomato.games.services.Database database -> d
    com.potatoandtomato.games.services.ScoresHandler scoresHandler -> e
    com.potatoandtomato.games.services.GameDataController gameDataController -> f
    18:25:void <init>(com.potatoandtomato.games.assets.MyAssets,com.potatoandtomato.games.services.Texts,com.potatoandtomato.games.services.SoundsWrapper,com.potatoandtomato.games.services.Database,com.potatoandtomato.games.services.ScoresHandler,com.potatoandtomato.games.services.GameDataController) -> <init>
    28:28:com.potatoandtomato.games.services.GameDataController getGameDataController() -> getGameDataController
    32:33:void setGameDataController(com.potatoandtomato.games.services.GameDataController) -> setGameDataController
    36:36:com.potatoandtomato.games.services.ScoresHandler getScoresHandler() -> getScoresHandler
    40:40:com.potatoandtomato.games.services.Database getDatabase() -> getDatabase
    44:44:com.potatoandtomato.games.services.SoundsWrapper getSoundsWrapper() -> getSoundsWrapper
    48:48:com.potatoandtomato.games.services.Texts getTexts() -> getTexts
    52:52:com.potatoandtomato.games.assets.MyAssets getAssets() -> getAssets
    56:57:void setAssets(com.potatoandtomato.games.assets.MyAssets) -> setAssets
com.potatoandtomato.games.models.TerrainModel -> com.potatoandtomato.games.d.f:
    int col -> a
    int row -> b
    boolean breaking -> c
    boolean broken -> d
    boolean percentShown -> e
    boolean selected -> f
    12:15:void <init>(int,int) -> <init>
    18:18:int getRow() -> getRow
    22:22:int getCol() -> getCol
    26:26:boolean isBroken() -> a
    30:31:void setBroken(boolean) -> setBroken
    34:34:boolean isBreaking() -> b
    38:39:void setBreaking(boolean) -> setBreaking
    42:42:boolean isSelected() -> c
    46:47:void setSelected(boolean) -> setSelected
    50:50:boolean isPercentShown() -> d
    54:55:void setPercentShown(boolean) -> setPercentShown
com.potatoandtomato.games.references.BattleRef -> com.potatoandtomato.games.e.a:
    java.util.HashMap refs -> a
    19:22:void <init>() -> <init>
    25:32:void populateAll() -> a
    35:43:java.util.HashMap mouse() -> b
    47:55:java.util.HashMap cat() -> c
    59:67:java.util.HashMap dog() -> d
    71:79:java.util.HashMap wolf() -> e
    83:91:java.util.HashMap tiger() -> f
    95:103:java.util.HashMap lion() -> g
    107:115:java.util.HashMap elephant() -> h
    119:125:int getWinPercent(com.potatoandtomato.games.models.ChessModel,com.potatoandtomato.games.models.ChessModel) -> a
    131:148:boolean getFromIsWinner(com.potatoandtomato.games.models.ChessModel,com.potatoandtomato.games.models.ChessModel) -> b
    155:204:int processStatusPoint(int,com.potatoandtomato.games.models.ChessModel,com.potatoandtomato.games.models.ChessModel) -> a
com.potatoandtomato.games.references.MovementRef -> com.potatoandtomato.games.e.b:
    java.util.ArrayList previousMoves -> a
    19:21:void <init>() -> <init>
    24:43:java.util.ArrayList getPossibleValidMoves(java.util.ArrayList,com.potatoandtomato.games.screens.TerrainLogic) -> a
    48:79:boolean isValidMove(java.util.ArrayList,com.potatoandtomato.games.screens.TerrainLogic,com.potatoandtomato.games.screens.TerrainLogic) -> a
    83:86:boolean checkHasChess(java.util.ArrayList,int,int) -> a
    92:98:void addToPossibleMovesIfNoNull(java.util.ArrayList,java.util.ArrayList,java.util.ArrayList) -> a
    102:120:void processStatus(java.util.ArrayList,com.potatoandtomato.games.screens.TerrainLogic,java.util.ArrayList) -> a
    123:161:boolean isRepeatedMove(com.potatoandtomato.games.screens.TerrainLogic,com.potatoandtomato.games.screens.TerrainLogic) -> a
    165:166:void addPreviousMove(com.potatoandtomato.games.screens.TerrainLogic,int,int) -> a
    169:170:void clearPreviousMoves() -> a
com.potatoandtomato.games.references.MovementRef$1 -> com.potatoandtomato.games.e.b$1:
    int[] $SwitchMap$com$potatoandtomato$games$enums$Status -> a
    102:102:void <clinit>() -> <clinit>
com.potatoandtomato.games.references.MovementRef$Move -> com.potatoandtomato.games.e.b$a:
    com.potatoandtomato.games.enums.ChessType chessType -> b
    int col -> c
    int row -> d
    com.potatoandtomato.games.references.MovementRef this$0 -> a
    178:182:void <init>(com.potatoandtomato.games.references.MovementRef,com.potatoandtomato.games.enums.ChessType,int,int) -> <init>
    185:185:com.potatoandtomato.games.enums.ChessType getChessType() -> a
    189:189:int getCol() -> b
    193:193:int getRow() -> c
    198:204:boolean equals(java.lang.Object) -> equals
com.potatoandtomato.games.references.StatusRef -> com.potatoandtomato.games.e.c:
    com.potatoandtomato.games.services.SoundsWrapper _soundsWrapper -> a
    long _abilityTriggeredAnimateTime -> b
    24:28:void <init>(com.potatoandtomato.games.services.SoundsWrapper) -> <init>
    31:50:void chessOpened(java.util.ArrayList,com.potatoandtomato.games.screens.TerrainLogic,com.potatoandtomato.games.enums.ChessColor,java.lang.String) -> a
    55:69:void chessMoved(java.util.ArrayList,com.potatoandtomato.games.screens.TerrainLogic,com.potatoandtomato.games.enums.ChessType,com.potatoandtomato.games.enums.ChessType,java.lang.String) -> a
    72:78:void suddenDeathStatus(java.util.ArrayList) -> a
    81:99:void turnOver(java.util.ArrayList) -> b
    102:122:void lionEffect(java.util.ArrayList,com.potatoandtomato.games.screens.TerrainLogic) -> a
    125:132:java.util.ArrayList getLionEffectTargets(java.util.ArrayList,com.potatoandtomato.games.screens.TerrainLogic) -> b
    136:156:void tigerEffect(java.util.ArrayList,com.potatoandtomato.games.screens.TerrainLogic) -> c
    159:166:java.util.ArrayList getTigerEffectTargets(java.util.ArrayList,com.potatoandtomato.games.screens.TerrainLogic) -> d
    170:189:void elephantEffect(java.util.ArrayList,com.potatoandtomato.games.screens.TerrainLogic) -> e
    192:199:java.util.ArrayList getElephantEffectTargets(java.util.ArrayList,com.potatoandtomato.games.screens.TerrainLogic) -> f
    203:236:void wolfEffect(java.util.ArrayList,com.potatoandtomato.games.enums.ChessType) -> a
    239:256:void mouseEffect(com.potatoandtomato.games.screens.TerrainLogic,com.potatoandtomato.games.enums.ChessType) -> a
    260:294:void catEffect(java.util.ArrayList,com.potatoandtomato.games.screens.TerrainLogic,java.lang.String) -> a
    298:330:java.util.ArrayList getCatEffectTargets(java.util.ArrayList,com.potatoandtomato.games.screens.TerrainLogic,java.lang.String) -> b
    334:359:void dogEffect(java.util.ArrayList,com.potatoandtomato.games.screens.TerrainLogic,com.potatoandtomato.games.enums.ChessColor) -> a
    362:370:java.util.ArrayList getDogEffectTargets(java.util.ArrayList,com.potatoandtomato.games.screens.TerrainLogic) -> g
    374:383:java.util.ArrayList getAdjacentTerrains(java.util.ArrayList,com.potatoandtomato.games.screens.TerrainLogic) -> h
    387:400:java.util.ArrayList getTerrainsByChessType(java.util.ArrayList,com.potatoandtomato.games.enums.ChessType,boolean) -> a
    404:417:java.util.ArrayList getTerrainsByAnimalType(java.util.ArrayList,com.potatoandtomato.games.enums.ChessAnimal,boolean) -> a
    421:430:boolean setStatus(com.potatoandtomato.games.screens.TerrainLogic,com.potatoandtomato.games.enums.Status,boolean) -> a
    435:437:void showAbility(com.potatoandtomato.games.screens.TerrainLogic,com.potatoandtomato.games.enums.ChessType,boolean,com.potatoandtomato.games.enums.ChessAnimal) -> a
    440:440:boolean isNegativeStatus(com.potatoandtomato.games.enums.Status) -> a
    445:449:void transformAnimalIfNeeded(com.potatoandtomato.games.screens.TerrainLogic,java.lang.String) -> a
    21:21:boolean access$000(com.potatoandtomato.games.references.StatusRef,com.potatoandtomato.games.screens.TerrainLogic,com.potatoandtomato.games.enums.Status,boolean) -> a
    21:21:com.potatoandtomato.games.services.SoundsWrapper access$100(com.potatoandtomato.games.references.StatusRef) -> a
    21:21:void access$200(com.potatoandtomato.games.references.StatusRef,com.potatoandtomato.games.screens.TerrainLogic,com.potatoandtomato.games.enums.ChessType,boolean,com.potatoandtomato.games.enums.ChessAnimal) -> a
    21:21:long access$300(com.potatoandtomato.games.references.StatusRef) -> b
com.potatoandtomato.games.references.StatusRef$1 -> com.potatoandtomato.games.e.c$1:
    com.potatoandtomato.games.screens.TerrainLogic val$lionLogic -> a
    java.util.ArrayList val$targetLogics -> b
    com.potatoandtomato.games.references.StatusRef this$0 -> c
    109:109:void <init>(com.potatoandtomato.games.references.StatusRef,com.potatoandtomato.games.screens.TerrainLogic,java.util.ArrayList) -> <init>
    112:118:void run() -> run
com.potatoandtomato.games.references.StatusRef$2 -> com.potatoandtomato.games.e.c$2:
    com.potatoandtomato.games.screens.TerrainLogic val$tigerLogic -> a
    java.util.ArrayList val$targetLogics -> b
    com.potatoandtomato.games.references.StatusRef this$0 -> c
    143:143:void <init>(com.potatoandtomato.games.references.StatusRef,com.potatoandtomato.games.screens.TerrainLogic,java.util.ArrayList) -> <init>
    146:153:void run() -> run
com.potatoandtomato.games.references.StatusRef$3 -> com.potatoandtomato.games.e.c$3:
    java.util.ArrayList val$targetLogics -> a
    com.potatoandtomato.games.references.StatusRef this$0 -> b
    177:177:void <init>(com.potatoandtomato.games.references.StatusRef,java.util.ArrayList) -> <init>
    180:186:void run() -> run
com.potatoandtomato.games.references.StatusRef$4 -> com.potatoandtomato.games.e.c$4:
    com.potatoandtomato.games.screens.TerrainLogic val$terrainLogic -> a
    com.potatoandtomato.games.enums.ChessType val$wolfChessType -> b
    com.potatoandtomato.games.references.StatusRef this$0 -> c
    206:206:void <init>(com.potatoandtomato.games.references.StatusRef,com.potatoandtomato.games.screens.TerrainLogic,com.potatoandtomato.games.enums.ChessType) -> <init>
    209:217:void run() -> run
com.potatoandtomato.games.references.StatusRef$4$1 -> com.potatoandtomato.games.e.c$4$1:
    com.potatoandtomato.games.references.StatusRef$4 this$1 -> a
    211:211:void <init>(com.potatoandtomato.games.references.StatusRef$4) -> <init>
    214:215:void run() -> run
com.potatoandtomato.games.references.StatusRef$5 -> com.potatoandtomato.games.e.c$5:
    java.lang.Runnable val$effectRunnable -> a
    com.potatoandtomato.games.references.StatusRef this$0 -> b
    221:221:void <init>(com.potatoandtomato.games.references.StatusRef,java.lang.Runnable) -> <init>
    224:225:void run() -> run
com.potatoandtomato.games.references.StatusRef$6 -> com.potatoandtomato.games.e.c$6:
    com.potatoandtomato.games.screens.TerrainLogic val$terrainLogic -> a
    com.potatoandtomato.games.enums.ChessType val$mouseChessType -> b
    com.potatoandtomato.games.models.ChessModel val$chessModel -> c
    com.potatoandtomato.games.references.StatusRef this$0 -> d
    242:242:void <init>(com.potatoandtomato.games.references.StatusRef,com.potatoandtomato.games.screens.TerrainLogic,com.potatoandtomato.games.enums.ChessType,com.potatoandtomato.games.models.ChessModel) -> <init>
    245:254:void run() -> run
com.potatoandtomato.games.references.StatusRef$6$1 -> com.potatoandtomato.games.e.c$6$1:
    com.potatoandtomato.games.references.StatusRef$6 this$1 -> a
    246:246:void <init>(com.potatoandtomato.games.references.StatusRef$6) -> <init>
    249:252:void run() -> run
com.potatoandtomato.games.references.StatusRef$7 -> com.potatoandtomato.games.e.c$7:
    com.potatoandtomato.games.screens.TerrainLogic val$openedLogic -> a
    java.util.ArrayList val$targetLogics -> b
    com.potatoandtomato.games.references.StatusRef this$0 -> c
    266:266:void <init>(com.potatoandtomato.games.references.StatusRef,com.potatoandtomato.games.screens.TerrainLogic,java.util.ArrayList) -> <init>
    269:291:void run() -> run
com.potatoandtomato.games.references.StatusRef$7$1 -> com.potatoandtomato.games.e.c$7$1:
    int[] val$i -> a
    com.potatoandtomato.games.references.StatusRef$7 this$1 -> b
    270:270:void <init>(com.potatoandtomato.games.references.StatusRef$7,int[]) -> <init>
    273:289:void run() -> run
com.potatoandtomato.games.references.StatusRef$7$1$1 -> com.potatoandtomato.games.e.c$7$1$1:
    com.potatoandtomato.games.references.StatusRef$7$1 this$2 -> a
    275:275:void <init>(com.potatoandtomato.games.references.StatusRef$7$1) -> <init>
    278:286:void run() -> run
com.potatoandtomato.games.references.StatusRef$7$1$1$1 -> com.potatoandtomato.games.e.c$7$1$1$1:
    com.potatoandtomato.games.references.StatusRef$7$1$1 this$3 -> a
    279:279:void <init>(com.potatoandtomato.games.references.StatusRef$7$1$1) -> <init>
    282:283:void run() -> run
com.potatoandtomato.games.references.StatusRef$8 -> com.potatoandtomato.games.e.c$8:
    com.potatoandtomato.games.screens.TerrainLogic val$openedLogic -> a
    java.util.ArrayList val$targetLogics -> b
    boolean val$revealChess -> c
    com.potatoandtomato.games.references.StatusRef this$0 -> d
    342:342:void <init>(com.potatoandtomato.games.references.StatusRef,com.potatoandtomato.games.screens.TerrainLogic,java.util.ArrayList,boolean) -> <init>
    346:356:void run() -> run
com.potatoandtomato.games.references.StatusRef$8$1 -> com.potatoandtomato.games.e.c$8$1:
    com.potatoandtomato.games.references.StatusRef$8 this$1 -> a
    348:348:void <init>(com.potatoandtomato.games.references.StatusRef$8) -> <init>
    351:354:void run() -> run
com.potatoandtomato.games.references.StatusRef$9 -> com.potatoandtomato.games.e.c$9:
    int[] $SwitchMap$com$potatoandtomato$games$enums$ChessAnimal -> a
    31:31:void <clinit>() -> <clinit>
com.potatoandtomato.games.screens.BoardLogic -> com.potatoandtomato.games.screens.a:
    com.potatoandtomato.games.models.Services _services -> a
    com.potatoandtomato.common.GameCoordinator _coordinator -> b
    java.util.ArrayList _terrains -> c
    com.potatoandtomato.games.screens.GraveyardLogic _graveyard -> d
    com.potatoandtomato.games.models.BoardModel _boardModel -> e
    com.potatoandtomato.games.references.BattleRef _battleRef -> f
    com.potatoandtomato.games.references.MovementRef _movementRef -> g
    com.potatoandtomato.games.references.StatusRef _statusRef -> h
    com.potatoandtomato.games.screens.BoardScreen _screen -> i
    com.potatoandtomato.games.services.GameDataController _gameDataController -> j
    com.potatoandtomato.games.screens.TerrainLogic _lastActiveTerrainLogic -> k
    com.potatoandtomato.games.screens.SplashLogic _splashLogic -> l
    com.potatoandtomato.games.helpers.RoomMsgHandler _roomMsgHandler -> m
    com.potatoandtomato.games.helpers.TutorialsHelper tutorialsHelper -> n
    com.potatoandtomato.games.helpers.GameDataContract _gameDataContract -> o
    com.potatoandtomato.games.bots.Bot bot -> p
    com.potatoandtomato.common.utils.SafeThread _checkCountTimeExpiredThread -> q
    boolean _crackStarting -> r
    boolean _crackHappened -> s
    boolean _suddenDeathHappened -> t
    boolean _gameEnded -> u
    61:89:void <init>(com.potatoandtomato.games.models.Services,com.potatoandtomato.common.GameCoordinator) -> <init>
    93:96:void init() -> a
    99:103:void continueGame() -> b
    106:115:void onSplashLogicDone() -> c
    119:204:void gameDataReceived(com.potatoandtomato.games.models.BoardModel,java.util.ArrayList,com.potatoandtomato.games.models.GraveModel) -> a
    207:210:void chessKilled(com.potatoandtomato.games.enums.ChessType,boolean) -> a
    214:226:void checkGameEnded() -> k
    229:233:void openChess(int,int,java.lang.String) -> a
    237:248:void chessMoved(int,int,int,int,boolean,boolean,java.lang.String) -> a
    252:269:void beforeTurnSwitched(com.potatoandtomato.games.enums.ActionType,com.potatoandtomato.games.screens.TerrainLogic,com.potatoandtomato.games.enums.ChessType,com.potatoandtomato.games.enums.ChessType,java.lang.String) -> a
    272:289:void switchTurn() -> l
    292:293:void skipTurn() -> d
    296:311:void invalidate() -> m
    314:315:void disableTouchable() -> n
    318:331:void setTurnTouchable() -> o
    334:334:boolean isMyTurn() -> p
    338:347:void terrainSelected(int,int) -> a
    351:354:void hideAllTerrainPercentTile() -> q
    357:362:void clearAllTerrainsHighlights() -> r
    365:370:void showPossibleMoves(com.potatoandtomato.games.screens.TerrainLogic) -> a
    373:402:void endGame(boolean) -> a
    405:406:void endGame(com.potatoandtomato.games.enums.ChessColor) -> a
    409:429:void suddenDeath() -> s
    432:440:void checkBoardCrack() -> t
    443:450:void crackBoardStarting() -> u
    453:493:void crackBoardHappened() -> v
    496:497:boolean isCrackable(com.potatoandtomato.games.screens.TerrainLogic) -> b
    501:507:void updateEnemyLeftTime(java.lang.String) -> a
    510:513:void gamePause() -> e
    516:518:void gameResume() -> f
    521:521:com.potatoandtomato.games.screens.BoardScreen getScreen() -> g
    525:557:void setListeners() -> w
    560:560:int getMyTimeLeft() -> x
    564:581:boolean checkHaveMove() -> y
    585:612:void setCountDownThread() -> z
    616:619:void dispose() -> dispose
    623:623:com.potatoandtomato.games.models.BoardModel getBoardModel() -> h
    627:627:com.potatoandtomato.games.screens.GraveyardLogic getGraveyardLogic() -> i
    631:631:java.util.ArrayList getTerrains() -> j
    39:39:int access$000(com.potatoandtomato.games.screens.BoardLogic) -> a
    39:39:void access$100(com.potatoandtomato.games.screens.BoardLogic) -> b
    39:39:void access$200(com.potatoandtomato.games.screens.BoardLogic,com.potatoandtomato.games.enums.ActionType,com.potatoandtomato.games.screens.TerrainLogic,com.potatoandtomato.games.enums.ChessType,com.potatoandtomato.games.enums.ChessType,java.lang.String) -> a
    39:39:void access$300(com.potatoandtomato.games.screens.BoardLogic,com.potatoandtomato.games.enums.ChessType,boolean) -> a
    39:39:void access$400(com.potatoandtomato.games.screens.BoardLogic) -> c
    39:39:void access$500(com.potatoandtomato.games.screens.BoardLogic) -> d
    39:39:void access$600(com.potatoandtomato.games.screens.BoardLogic) -> e
com.potatoandtomato.games.screens.BoardLogic$1 -> com.potatoandtomato.games.screens.a$1:
    com.potatoandtomato.games.screens.BoardLogic this$0 -> a
    77:77:void <init>(com.potatoandtomato.games.screens.BoardLogic) -> <init>
    80:81:void run() -> run
com.potatoandtomato.games.screens.BoardLogic$10 -> com.potatoandtomato.games.screens.a$2:
    com.potatoandtomato.games.screens.BoardLogic this$0 -> a
    474:474:void <init>(com.potatoandtomato.games.screens.BoardLogic) -> <init>
    477:478:void run() -> run
com.potatoandtomato.games.screens.BoardLogic$11 -> com.potatoandtomato.games.screens.a$3:
    com.potatoandtomato.common.utils.ThreadsPool val$threadsPool -> a
    com.potatoandtomato.games.screens.BoardLogic this$0 -> b
    482:482:void <init>(com.potatoandtomato.games.screens.BoardLogic,com.potatoandtomato.common.utils.ThreadsPool) -> <init>
    485:489:void run() -> run
com.potatoandtomato.games.screens.BoardLogic$12 -> com.potatoandtomato.games.screens.BoardLogic$12:
    com.potatoandtomato.games.screens.BoardLogic this$0 -> a
    525:525:void <init>(com.potatoandtomato.games.screens.BoardLogic) -> <init>
    528:536:void userAbandoned(java.lang.String) -> userAbandoned
    540:541:void userConnected(java.lang.String) -> userConnected
    545:546:void userDisconnected(java.lang.String) -> userDisconnected
com.potatoandtomato.games.screens.BoardLogic$13 -> com.potatoandtomato.games.screens.BoardLogic$13:
    com.potatoandtomato.games.screens.BoardLogic this$0 -> a
    550:550:void <init>(com.potatoandtomato.games.screens.BoardLogic) -> <init>
    553:554:void backPressed() -> backPressed
com.potatoandtomato.games.screens.BoardLogic$14 -> com.potatoandtomato.games.screens.a$4:
    com.potatoandtomato.games.screens.BoardLogic this$0 -> a
    587:587:void <init>(com.potatoandtomato.games.screens.BoardLogic) -> <init>
    590:610:void run() -> run
com.potatoandtomato.games.screens.BoardLogic$2 -> com.potatoandtomato.games.screens.a$5:
    com.potatoandtomato.games.screens.BoardLogic this$0 -> b
    137:137:void <init>(com.potatoandtomato.games.screens.BoardLogic) -> <init>
    140:148:void onSelected() -> b
    152:159:void onOpened() -> c
    163:172:void onMoved(int,int,int,int,boolean) -> a
    176:177:void changeTurnReady(com.potatoandtomato.games.enums.ActionType,com.potatoandtomato.games.enums.ChessType,com.potatoandtomato.games.enums.ChessType,java.lang.String) -> a
    181:182:void onChessKilled(com.potatoandtomato.games.enums.ChessType) -> a
com.potatoandtomato.games.screens.BoardLogic$3 -> com.potatoandtomato.games.screens.a$6:
    com.potatoandtomato.games.screens.BoardLogic this$0 -> a
    189:189:void <init>(com.potatoandtomato.games.screens.BoardLogic) -> <init>
    192:196:void run() -> run
com.potatoandtomato.games.screens.BoardLogic$4 -> com.potatoandtomato.games.screens.a$7:
    com.potatoandtomato.games.screens.BoardLogic this$0 -> a
    301:301:void <init>(com.potatoandtomato.games.screens.BoardLogic) -> <init>
    304:306:void run() -> run
com.potatoandtomato.games.screens.BoardLogic$5 -> com.potatoandtomato.games.screens.a$8:
    com.potatoandtomato.games.screens.BoardLogic this$0 -> a
    323:323:void <init>(com.potatoandtomato.games.screens.BoardLogic) -> <init>
    326:327:void run() -> run
com.potatoandtomato.games.screens.BoardLogic$6 -> com.potatoandtomato.games.screens.a$9:
    com.potatoandtomato.games.screens.BoardLogic this$0 -> a
    383:383:void <init>(com.potatoandtomato.games.screens.BoardLogic) -> <init>
    386:399:void onCallBack(java.util.HashMap,java.util.ArrayList) -> a
com.potatoandtomato.games.screens.BoardLogic$6$1 -> com.potatoandtomato.games.screens.a$9$1:
    com.potatoandtomato.games.screens.BoardLogic$6 this$1 -> a
    387:387:void <init>(com.potatoandtomato.games.screens.BoardLogic$6) -> <init>
    390:397:void run() -> run
com.potatoandtomato.games.screens.BoardLogic$6$1$1 -> com.potatoandtomato.games.screens.a$9$1$1:
    com.potatoandtomato.games.screens.BoardLogic$6$1 this$2 -> a
    390:390:void <init>(com.potatoandtomato.games.screens.BoardLogic$6$1) -> <init>
    393:395:void clicked(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float) -> clicked
com.potatoandtomato.games.screens.BoardLogic$7 -> com.potatoandtomato.games.screens.a$10:
    com.potatoandtomato.games.screens.BoardLogic this$0 -> a
    413:413:void <init>(com.potatoandtomato.games.screens.BoardLogic) -> <init>
    416:417:void run() -> run
com.potatoandtomato.games.screens.BoardLogic$8 -> com.potatoandtomato.games.screens.a$11:
    com.potatoandtomato.games.screens.BoardLogic this$0 -> a
    419:419:void <init>(com.potatoandtomato.games.screens.BoardLogic) -> <init>
    422:425:void run() -> run
com.potatoandtomato.games.screens.BoardLogic$9 -> com.potatoandtomato.games.screens.a$12:
    com.potatoandtomato.games.screens.TerrainLogic val$terrainLogic -> a
    com.potatoandtomato.games.screens.BoardLogic this$0 -> b
    461:461:void <init>(com.potatoandtomato.games.screens.BoardLogic,com.potatoandtomato.games.screens.TerrainLogic) -> <init>
    464:468:void run() -> run
com.potatoandtomato.games.screens.BoardScreen -> com.potatoandtomato.games.screens.BoardScreen:
    com.potatoandtomato.games.models.Services _services -> a
    com.potatoandtomato.games.services.Texts _texts -> b
    com.badlogic.gdx.scenes.scene2d.ui.Table _root -> c
    com.badlogic.gdx.scenes.scene2d.ui.Table _overlayTable -> d
    com.badlogic.gdx.scenes.scene2d.ui.Table _thunderTable -> e
    com.badlogic.gdx.scenes.scene2d.ui.Table _endGameTable -> f
    com.badlogic.gdx.scenes.scene2d.ui.Table _endGameRootTable -> g
    com.badlogic.gdx.scenes.scene2d.ui.Table _preStartTable -> h
    com.badlogic.gdx.scenes.scene2d.ui.Table _chessesTable -> i
    com.badlogic.gdx.scenes.scene2d.Stage _stage -> j
    com.potatoandtomato.common.assets.Assets _assets -> k
    boolean _paused -> l
    boolean _abandoning -> m
    57:96:void <init>(com.potatoandtomato.common.GameCoordinator,com.potatoandtomato.games.models.Services,com.potatoandtomato.games.screens.SplashActor,com.potatoandtomato.games.screens.GraveyardActor) -> <init>
    99:124:void thunderAnimation() -> a
    127:133:void setSuddenDeathBg() -> b
    136:154:void populateTerrains(java.util.ArrayList) -> a
    157:168:void setCanTouchChessTable(boolean) -> a
    171:182:void populateEndGameTable() -> c
    185:204:void showEndGameTable(boolean,com.potatoandtomato.games.enums.ChessColor) -> a
    207:220:void setPaused(boolean,boolean) -> a
    224:224:void show() -> show
    228:234:void render(float) -> render
    237:237:com.badlogic.gdx.scenes.scene2d.ui.Table getEndGameRootTable() -> d
    241:241:com.badlogic.gdx.scenes.scene2d.ui.Table getRoot() -> e
    247:247:void resize(int,int) -> resize
    252:252:void pause() -> pause
    257:257:void resume() -> resume
    262:262:void hide() -> hide
    267:267:void dispose() -> dispose
    39:39:com.badlogic.gdx.scenes.scene2d.Stage access$002(com.potatoandtomato.games.screens.BoardScreen,com.badlogic.gdx.scenes.scene2d.Stage) -> a
    39:39:com.badlogic.gdx.scenes.scene2d.ui.Table access$102(com.potatoandtomato.games.screens.BoardScreen,com.badlogic.gdx.scenes.scene2d.ui.Table) -> a
    39:39:com.badlogic.gdx.scenes.scene2d.ui.Table access$100(com.potatoandtomato.games.screens.BoardScreen) -> a
    39:39:com.potatoandtomato.common.assets.Assets access$200(com.potatoandtomato.games.screens.BoardScreen) -> b
    39:39:com.badlogic.gdx.scenes.scene2d.ui.Table access$302(com.potatoandtomato.games.screens.BoardScreen,com.badlogic.gdx.scenes.scene2d.ui.Table) -> b
    39:39:com.badlogic.gdx.scenes.scene2d.ui.Table access$300(com.potatoandtomato.games.screens.BoardScreen) -> c
    39:39:com.badlogic.gdx.scenes.scene2d.ui.Table access$402(com.potatoandtomato.games.screens.BoardScreen,com.badlogic.gdx.scenes.scene2d.ui.Table) -> c
    39:39:com.badlogic.gdx.scenes.scene2d.ui.Table access$400(com.potatoandtomato.games.screens.BoardScreen) -> d
    39:39:com.badlogic.gdx.scenes.scene2d.Stage access$000(com.potatoandtomato.games.screens.BoardScreen) -> e
    39:39:com.potatoandtomato.games.models.Services access$500(com.potatoandtomato.games.screens.BoardScreen) -> f
    39:39:com.badlogic.gdx.scenes.scene2d.ui.Table access$602(com.potatoandtomato.games.screens.BoardScreen,com.badlogic.gdx.scenes.scene2d.ui.Table) -> d
    39:39:com.badlogic.gdx.scenes.scene2d.ui.Table access$600(com.potatoandtomato.games.screens.BoardScreen) -> g
    39:39:com.badlogic.gdx.scenes.scene2d.ui.Table access$702(com.potatoandtomato.games.screens.BoardScreen,com.badlogic.gdx.scenes.scene2d.ui.Table) -> e
    39:39:com.badlogic.gdx.scenes.scene2d.ui.Table access$700(com.potatoandtomato.games.screens.BoardScreen) -> h
    39:39:com.badlogic.gdx.scenes.scene2d.ui.Table access$802(com.potatoandtomato.games.screens.BoardScreen,com.badlogic.gdx.scenes.scene2d.ui.Table) -> f
    39:39:com.badlogic.gdx.scenes.scene2d.ui.Table access$800(com.potatoandtomato.games.screens.BoardScreen) -> i
    39:39:boolean access$900(com.potatoandtomato.games.screens.BoardScreen) -> j
com.potatoandtomato.games.screens.BoardScreen$1 -> com.potatoandtomato.games.screens.BoardScreen$1:
    com.potatoandtomato.games.screens.SplashActor val$splashActor -> a
    com.potatoandtomato.games.screens.GraveyardActor val$graveyardActor -> b
    com.potatoandtomato.games.screens.BoardScreen this$0 -> c
    62:62:void <init>(com.potatoandtomato.games.screens.BoardScreen,com.potatoandtomato.games.screens.SplashActor,com.potatoandtomato.games.screens.GraveyardActor) -> <init>
    65:94:void run() -> run
com.potatoandtomato.games.screens.BoardScreen$2 -> com.potatoandtomato.games.screens.BoardScreen$2:
    com.potatoandtomato.games.screens.BoardScreen this$0 -> a
    99:99:void <init>(com.potatoandtomato.games.screens.BoardScreen) -> <init>
    102:122:void run() -> run
com.potatoandtomato.games.screens.BoardScreen$2$1 -> com.potatoandtomato.games.screens.BoardScreen$2$1:
    com.potatoandtomato.games.screens.BoardScreen$2 this$1 -> a
    109:109:void <init>(com.potatoandtomato.games.screens.BoardScreen$2) -> <init>
    112:113:void run() -> run
com.potatoandtomato.games.screens.BoardScreen$2$2 -> com.potatoandtomato.games.screens.BoardScreen$2$2:
    com.potatoandtomato.games.screens.BoardScreen$2 this$1 -> a
    116:116:void <init>(com.potatoandtomato.games.screens.BoardScreen$2) -> <init>
    119:120:void run() -> run
com.potatoandtomato.games.screens.BoardScreen$3 -> com.potatoandtomato.games.screens.BoardScreen$3:
    com.potatoandtomato.games.screens.BoardScreen this$0 -> a
    127:127:void <init>(com.potatoandtomato.games.screens.BoardScreen) -> <init>
    130:131:void run() -> run
com.potatoandtomato.games.screens.BoardScreen$4 -> com.potatoandtomato.games.screens.BoardScreen$4:
    java.util.ArrayList val$terrainLogics -> a
    com.potatoandtomato.games.screens.BoardScreen this$0 -> b
    136:136:void <init>(com.potatoandtomato.games.screens.BoardScreen,java.util.ArrayList) -> <init>
    139:152:void run() -> run
com.potatoandtomato.games.screens.BoardScreen$5 -> com.potatoandtomato.games.screens.BoardScreen$5:
    boolean val$canTouch -> a
    com.potatoandtomato.games.screens.BoardScreen this$0 -> b
    157:157:void <init>(com.potatoandtomato.games.screens.BoardScreen,boolean) -> <init>
    160:166:void run() -> run
com.potatoandtomato.games.screens.BoardScreen$6 -> com.potatoandtomato.games.screens.BoardScreen$6:
    com.potatoandtomato.games.screens.BoardScreen this$0 -> a
    171:171:void <init>(com.potatoandtomato.games.screens.BoardScreen) -> <init>
    174:180:void run() -> run
com.potatoandtomato.games.screens.BoardScreen$7 -> com.potatoandtomato.games.screens.BoardScreen$7:
    com.potatoandtomato.games.enums.ChessColor val$chessColor -> a
    boolean val$won -> b
    com.potatoandtomato.games.screens.BoardScreen this$0 -> c
    185:185:void <init>(com.potatoandtomato.games.screens.BoardScreen,com.potatoandtomato.games.enums.ChessColor,boolean) -> <init>
    188:202:void run() -> run
com.potatoandtomato.games.screens.BoardScreen$8 -> com.potatoandtomato.games.screens.BoardScreen$8:
    boolean val$isMyTurn -> a
    com.potatoandtomato.games.screens.BoardScreen this$0 -> b
    208:208:void <init>(com.potatoandtomato.games.screens.BoardScreen,boolean) -> <init>
    211:218:void run() -> run
com.potatoandtomato.games.screens.ChessActor -> com.potatoandtomato.games.screens.b:
    com.potatoandtomato.games.screens.ChessActor _this -> a
    com.badlogic.gdx.scenes.scene2d.ui.Table _coverChess -> b
    com.badlogic.gdx.scenes.scene2d.ui.Table _previewChess -> c
    com.potatoandtomato.games.controls.CloneableTable _animalChess -> d
    com.potatoandtomato.games.assets.MyAssets _assets -> e
    boolean _expanded -> f
    boolean _initialized -> g
    com.badlogic.gdx.scenes.scene2d.ui.Image _animalImage -> h
    com.badlogic.gdx.scenes.scene2d.ui.Image _glowChess -> i
    boolean _alreadySetAnimalChessBg -> j
    com.potatoandtomato.games.services.SoundsWrapper _soundsWrapper -> k
    com.badlogic.gdx.scenes.scene2d.ui.Table _statusTable -> l
    com.badlogic.gdx.scenes.scene2d.ui.Table _defendSuccessTable -> m
    com.potatoandtomato.games.enums.Status _currentStatus -> n
    boolean _previewing -> o
    52:58:void <init>(com.potatoandtomato.games.assets.MyAssets,com.potatoandtomato.games.services.SoundsWrapper) -> <init>
    61:111:void populate() -> a
    114:139:void previewChess(boolean,java.lang.Runnable) -> a
    143:144:void openChess(java.lang.Runnable) -> a
    147:169:void flipChessAnimation(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor,java.lang.Runnable) -> a
    172:194:boolean openChess(float,float) -> a
    199:208:void resetOpenChess() -> b
    211:226:void setAnimal(com.potatoandtomato.games.enums.ChessType) -> a
    230:260:void setSurface(boolean,com.potatoandtomato.games.enums.ChessType) -> a
    263:275:void moving(float,float,float,float) -> a
    278:306:void defendSuccess() -> c
    310:320:void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> draw
    323:333:void fixChessSizePosition(com.badlogic.gdx.scenes.scene2d.Actor,int) -> a
    336:337:com.badlogic.gdx.scenes.scene2d.Actor clone() -> d
    341:361:void invalidate(com.potatoandtomato.games.models.ChessModel,boolean) -> a
    365:403:void showAbilityTriggered(com.potatoandtomato.games.enums.ChessType,boolean) -> a
    406:442:void setStatusIcon(com.potatoandtomato.games.enums.Status,boolean) -> a
    445:445:boolean isPreviewing() -> e
    449:450:void setPreviewing(boolean) -> a
    453:453:com.badlogic.gdx.scenes.scene2d.ui.Table getCoverChess() -> f
    36:36:java.lang.Object clone() -> clone
    36:36:com.potatoandtomato.games.screens.ChessActor access$000(com.potatoandtomato.games.screens.ChessActor) -> a
    36:36:com.badlogic.gdx.scenes.scene2d.ui.Table access$102(com.potatoandtomato.games.screens.ChessActor,com.badlogic.gdx.scenes.scene2d.ui.Table) -> a
    36:36:com.badlogic.gdx.scenes.scene2d.ui.Table access$100(com.potatoandtomato.games.screens.ChessActor) -> b
    36:36:com.potatoandtomato.games.assets.MyAssets access$200(com.potatoandtomato.games.screens.ChessActor) -> c
    36:36:com.badlogic.gdx.scenes.scene2d.ui.Table access$302(com.potatoandtomato.games.screens.ChessActor,com.badlogic.gdx.scenes.scene2d.ui.Table) -> b
    36:36:com.badlogic.gdx.scenes.scene2d.ui.Table access$300(com.potatoandtomato.games.screens.ChessActor) -> d
    36:36:com.potatoandtomato.games.controls.CloneableTable access$402(com.potatoandtomato.games.screens.ChessActor,com.potatoandtomato.games.controls.CloneableTable) -> a
    36:36:com.potatoandtomato.games.controls.CloneableTable access$400(com.potatoandtomato.games.screens.ChessActor) -> e
    36:36:com.badlogic.gdx.scenes.scene2d.ui.Image access$502(com.potatoandtomato.games.screens.ChessActor,com.badlogic.gdx.scenes.scene2d.ui.Image) -> a
    36:36:com.badlogic.gdx.scenes.scene2d.ui.Image access$500(com.potatoandtomato.games.screens.ChessActor) -> f
    36:36:com.badlogic.gdx.scenes.scene2d.ui.Table access$602(com.potatoandtomato.games.screens.ChessActor,com.badlogic.gdx.scenes.scene2d.ui.Table) -> c
    36:36:com.badlogic.gdx.scenes.scene2d.ui.Table access$600(com.potatoandtomato.games.screens.ChessActor) -> g
    36:36:com.badlogic.gdx.scenes.scene2d.ui.Table access$702(com.potatoandtomato.games.screens.ChessActor,com.badlogic.gdx.scenes.scene2d.ui.Table) -> d
    36:36:com.badlogic.gdx.scenes.scene2d.ui.Table access$700(com.potatoandtomato.games.screens.ChessActor) -> h
    36:36:boolean access$802(com.potatoandtomato.games.screens.ChessActor,boolean) -> a
    36:36:void access$900(com.potatoandtomato.games.screens.ChessActor,com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor,java.lang.Runnable) -> a
    36:36:com.potatoandtomato.games.services.SoundsWrapper access$1000(com.potatoandtomato.games.screens.ChessActor) -> i
    36:36:com.badlogic.gdx.scenes.scene2d.ui.Image access$1102(com.potatoandtomato.games.screens.ChessActor,com.badlogic.gdx.scenes.scene2d.ui.Image) -> b
    36:36:com.badlogic.gdx.scenes.scene2d.ui.Image access$1100(com.potatoandtomato.games.screens.ChessActor) -> j
    36:36:boolean access$1200(com.potatoandtomato.games.screens.ChessActor) -> k
    36:36:boolean access$1202(com.potatoandtomato.games.screens.ChessActor,boolean) -> b
    36:36:com.potatoandtomato.games.enums.Status access$1300(com.potatoandtomato.games.screens.ChessActor) -> l
    36:36:com.potatoandtomato.games.enums.Status access$1302(com.potatoandtomato.games.screens.ChessActor,com.potatoandtomato.games.enums.Status) -> a
com.potatoandtomato.games.screens.ChessActor$1 -> com.potatoandtomato.games.screens.b$1:
    com.potatoandtomato.games.screens.ChessActor this$0 -> a
    61:61:void <init>(com.potatoandtomato.games.screens.ChessActor) -> <init>
    64:109:void run() -> run
com.potatoandtomato.games.screens.ChessActor$10 -> com.potatoandtomato.games.screens.b$2:
    com.badlogic.gdx.scenes.scene2d.Actor val$chessTable -> a
    int val$offsetSize -> b
    com.potatoandtomato.games.screens.ChessActor this$0 -> c
    323:323:void <init>(com.potatoandtomato.games.screens.ChessActor,com.badlogic.gdx.scenes.scene2d.Actor,int) -> <init>
    326:330:void run() -> run
com.potatoandtomato.games.screens.ChessActor$11 -> com.potatoandtomato.games.screens.b$3:
    com.potatoandtomato.games.models.ChessModel val$chessModel -> a
    boolean val$invalidateStatus -> b
    com.potatoandtomato.games.screens.ChessActor this$0 -> c
    341:341:void <init>(com.potatoandtomato.games.screens.ChessActor,com.potatoandtomato.games.models.ChessModel,boolean) -> <init>
    344:356:void run() -> run
com.potatoandtomato.games.screens.ChessActor$12 -> com.potatoandtomato.games.screens.b$4:
    com.potatoandtomato.games.enums.ChessType val$chessType -> a
    boolean val$hideChessAnimal -> b
    com.potatoandtomato.games.screens.ChessActor this$0 -> c
    365:365:void <init>(com.potatoandtomato.games.screens.ChessActor,com.potatoandtomato.games.enums.ChessType,boolean) -> <init>
    368:401:void run() -> run
com.potatoandtomato.games.screens.ChessActor$12$1 -> com.potatoandtomato.games.screens.b$4$1:
    com.badlogic.gdx.scenes.scene2d.ui.Image val$fadeOutAnimalImage -> a
    com.potatoandtomato.games.screens.ChessActor$12 this$1 -> b
    384:384:void <init>(com.potatoandtomato.games.screens.ChessActor$12,com.badlogic.gdx.scenes.scene2d.ui.Image) -> <init>
    387:397:void run() -> run
com.potatoandtomato.games.screens.ChessActor$12$1$1 -> com.potatoandtomato.games.screens.b$4$1$1:
    com.potatoandtomato.games.screens.ChessActor$12$1 this$2 -> a
    390:390:void <init>(com.potatoandtomato.games.screens.ChessActor$12$1) -> <init>
    393:394:void run() -> run
com.potatoandtomato.games.screens.ChessActor$13 -> com.potatoandtomato.games.screens.b$5:
    com.potatoandtomato.games.enums.Status val$status -> a
    boolean val$animate -> b
    com.potatoandtomato.games.screens.ChessActor this$0 -> c
    406:406:void <init>(com.potatoandtomato.games.screens.ChessActor,com.potatoandtomato.games.enums.Status,boolean) -> <init>
    409:440:void run() -> run
com.potatoandtomato.games.screens.ChessActor$13$1 -> com.potatoandtomato.games.screens.b$5$1:
    com.potatoandtomato.games.screens.ChessActor$13 this$1 -> a
    415:415:void <init>(com.potatoandtomato.games.screens.ChessActor$13) -> <init>
    418:420:void run() -> run
com.potatoandtomato.games.screens.ChessActor$2 -> com.potatoandtomato.games.screens.b$6:
    boolean val$revealChess -> a
    java.lang.Runnable val$toRun -> b
    com.potatoandtomato.games.screens.ChessActor this$0 -> c
    114:114:void <init>(com.potatoandtomato.games.screens.ChessActor,boolean,java.lang.Runnable) -> <init>
    117:137:void run() -> run
com.potatoandtomato.games.screens.ChessActor$2$1 -> com.potatoandtomato.games.screens.b$6$1:
    com.potatoandtomato.games.screens.ChessActor$2 this$1 -> a
    119:119:void <init>(com.potatoandtomato.games.screens.ChessActor$2) -> <init>
    122:135:void run() -> run
com.potatoandtomato.games.screens.ChessActor$2$1$1 -> com.potatoandtomato.games.screens.b$6$1$1:
    com.potatoandtomato.games.screens.ChessActor$2$1 this$2 -> a
    122:122:void <init>(com.potatoandtomato.games.screens.ChessActor$2$1) -> <init>
    125:133:void run() -> run
com.potatoandtomato.games.screens.ChessActor$2$1$1$1 -> com.potatoandtomato.games.screens.b$6$1$1$1:
    com.potatoandtomato.games.screens.ChessActor$2$1$1 this$3 -> a
    125:125:void <init>(com.potatoandtomato.games.screens.ChessActor$2$1$1) -> <init>
    128:131:void run() -> run
com.potatoandtomato.games.screens.ChessActor$3 -> com.potatoandtomato.games.screens.b$7:
    com.badlogic.gdx.scenes.scene2d.Actor val$showingChess -> a
    com.badlogic.gdx.scenes.scene2d.Actor val$hidingChess -> b
    java.lang.Runnable val$toRun -> c
    com.potatoandtomato.games.screens.ChessActor this$0 -> d
    147:147:void <init>(com.potatoandtomato.games.screens.ChessActor,com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor,java.lang.Runnable) -> <init>
    150:167:void run() -> run
com.potatoandtomato.games.screens.ChessActor$3$1 -> com.potatoandtomato.games.screens.b$7$1:
    com.potatoandtomato.games.screens.ChessActor$3 this$1 -> a
    159:159:void <init>(com.potatoandtomato.games.screens.ChessActor$3) -> <init>
    162:165:void run() -> run
com.potatoandtomato.games.screens.ChessActor$4 -> com.potatoandtomato.games.screens.b$8:
    float val$finalOpenPercentage -> a
    com.potatoandtomato.games.screens.ChessActor this$0 -> b
    184:184:void <init>(com.potatoandtomato.games.screens.ChessActor,float) -> <init>
    187:189:void run() -> run
com.potatoandtomato.games.screens.ChessActor$5 -> com.potatoandtomato.games.screens.b$9:
    com.potatoandtomato.games.screens.ChessActor this$0 -> a
    199:199:void <init>(com.potatoandtomato.games.screens.ChessActor) -> <init>
    202:206:void run() -> run
com.potatoandtomato.games.screens.ChessActor$6 -> com.potatoandtomato.games.screens.b$10:
    com.potatoandtomato.games.enums.ChessType val$chessType -> a
    com.potatoandtomato.games.screens.ChessActor this$0 -> b
    211:211:void <init>(com.potatoandtomato.games.screens.ChessActor,com.potatoandtomato.games.enums.ChessType) -> <init>
    214:224:void run() -> run
com.potatoandtomato.games.screens.ChessActor$7 -> com.potatoandtomato.games.screens.b$11:
    com.potatoandtomato.games.enums.ChessType val$chessType -> a
    boolean val$selected -> b
    com.potatoandtomato.games.screens.ChessActor this$0 -> c
    230:230:void <init>(com.potatoandtomato.games.screens.ChessActor,com.potatoandtomato.games.enums.ChessType,boolean) -> <init>
    233:258:void run() -> run
com.potatoandtomato.games.screens.ChessActor$8 -> com.potatoandtomato.games.screens.b$12:
    float val$addedWidth -> a
    float val$addedHeight -> b
    float val$addedX -> c
    float val$addedY -> d
    com.potatoandtomato.games.screens.ChessActor this$0 -> e
    263:263:void <init>(com.potatoandtomato.games.screens.ChessActor,float,float,float,float) -> <init>
    266:273:void run() -> run
com.potatoandtomato.games.screens.ChessActor$9 -> com.potatoandtomato.games.screens.b$13:
    com.potatoandtomato.games.screens.ChessActor this$0 -> a
    278:278:void <init>(com.potatoandtomato.games.screens.ChessActor) -> <init>
    281:304:void run() -> run
com.potatoandtomato.games.screens.ChessActor$9$1 -> com.potatoandtomato.games.screens.b$13$1:
    com.badlogic.gdx.scenes.scene2d.ui.Image val$star1Image -> a
    com.badlogic.gdx.scenes.scene2d.ui.Image val$star2Image -> b
    com.potatoandtomato.games.screens.ChessActor$9 this$1 -> c
    293:293:void <init>(com.potatoandtomato.games.screens.ChessActor$9,com.badlogic.gdx.scenes.scene2d.ui.Image,com.badlogic.gdx.scenes.scene2d.ui.Image) -> <init>
    296:299:void run() -> run
com.potatoandtomato.games.screens.ChessLogic -> com.potatoandtomato.games.screens.c:
    com.potatoandtomato.games.models.ChessModel _chessModel -> a
    com.potatoandtomato.games.screens.ChessActor _chessActor -> b
    com.potatoandtomato.games.absint.ActionListener _actionListener -> c
    com.potatoandtomato.games.services.SoundsWrapper _soundsWrapper -> d
    com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop _dragAndDrop -> g
    java.util.ArrayList _dragDropTargets -> e
    com.potatoandtomato.games.services.GameDataController _gameDataController -> f
    40:50:void <init>(com.potatoandtomato.games.models.ChessModel,com.potatoandtomato.games.assets.MyAssets,com.potatoandtomato.games.services.SoundsWrapper,com.potatoandtomato.games.services.GameDataController) -> <init>
    55:69:void openChess(java.lang.Runnable) -> a
    72:79:void addDragDropTarget(com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Target) -> a
    82:85:void clearDragDropTargets() -> a
    88:90:void setSelected(boolean) -> a
    93:97:void setFocusing(boolean) -> b
    100:108:void setChessModel(com.potatoandtomato.games.models.ChessModel) -> a
    111:111:com.badlogic.gdx.scenes.scene2d.Actor cloneActor() -> b
    115:115:com.potatoandtomato.games.screens.ChessActor getChessActor() -> c
    119:120:void invalidate(boolean) -> c
    123:123:com.potatoandtomato.games.models.ChessModel getChessModel() -> d
    127:128:void setActionListener(com.potatoandtomato.games.absint.ActionListener) -> a
    131:172:void setListeners() -> e
    175:211:void setDragDrop() -> f
    30:30:com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop access$000(com.potatoandtomato.games.screens.ChessLogic) -> a
com.potatoandtomato.games.screens.ChessLogic$1 -> com.potatoandtomato.games.screens.c$1:
    java.lang.Runnable val$onFinish -> a
    com.potatoandtomato.games.screens.ChessLogic this$0 -> b
    56:56:void <init>(com.potatoandtomato.games.screens.ChessLogic,java.lang.Runnable) -> <init>
    59:60:void run() -> run
com.potatoandtomato.games.screens.ChessLogic$2 -> com.potatoandtomato.games.screens.c$2:
    com.potatoandtomato.games.screens.ChessLogic this$0 -> a
    131:131:void <init>(com.potatoandtomato.games.screens.ChessLogic) -> <init>
    134:170:void run() -> run
com.potatoandtomato.games.screens.ChessLogic$2$1 -> com.potatoandtomato.games.screens.c$2$1:
    float _startDragX -> b
    com.potatoandtomato.games.screens.ChessLogic$2 this$1 -> a
    134:134:void <init>(com.potatoandtomato.games.screens.ChessLogic$2) -> <init>
    139:140:void dragStart(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> dragStart
    144:151:void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> touchDragged
    155:156:boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> touchDown
    162:167:void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> touchUp
com.potatoandtomato.games.screens.ChessLogic$3 -> com.potatoandtomato.games.screens.c$3:
    com.potatoandtomato.games.screens.ChessLogic this$0 -> a
    178:178:void <init>(com.potatoandtomato.games.screens.ChessLogic,com.badlogic.gdx.scenes.scene2d.Actor) -> <init>
    180:188:com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload dragStart(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> dragStart
    193:209:void dragStop(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload,com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Target) -> dragStop
com.potatoandtomato.games.screens.ChessLogic$3$1 -> com.potatoandtomato.games.screens.c$3$1:
    com.badlogic.gdx.scenes.scene2d.Actor val$clone -> a
    com.potatoandtomato.games.screens.ChessLogic$3 this$1 -> b
    199:199:void <init>(com.potatoandtomato.games.screens.ChessLogic$3,com.badlogic.gdx.scenes.scene2d.Actor) -> <init>
    202:205:void run() -> run
com.potatoandtomato.games.screens.GraveyardActor -> com.potatoandtomato.games.screens.d:
    com.potatoandtomato.games.screens.GraveyardActor _this -> a
    com.badlogic.gdx.scenes.scene2d.ui.Table _yellowGraveTable -> b
    com.badlogic.gdx.scenes.scene2d.ui.Table _redGraveTable -> c
    com.badlogic.gdx.scenes.scene2d.ui.Table _yellowTotalRootTable -> d
    com.badlogic.gdx.scenes.scene2d.ui.Table _redTotalRootTable -> e
    com.badlogic.gdx.scenes.scene2d.ui.Label _yellowTotalLabel -> f
    com.badlogic.gdx.scenes.scene2d.ui.Label _redTotalLabel -> g
    com.badlogic.gdx.scenes.scene2d.ui.Label _turnLabel -> h
    com.badlogic.gdx.scenes.scene2d.ui.Label _turnCountLabel -> i
    com.badlogic.gdx.scenes.scene2d.ui.Label _yellowPlayerLabel -> j
    com.badlogic.gdx.scenes.scene2d.ui.Label _redPlayerLabel -> k
    com.badlogic.gdx.scenes.scene2d.ui.Label _yellowTimer -> l
    com.badlogic.gdx.scenes.scene2d.ui.Label _redTimer -> m
    com.badlogic.gdx.scenes.scene2d.ui.Label _graveLabel -> n
    com.badlogic.gdx.scenes.scene2d.ui.Image _graveCloseImage -> o
    com.badlogic.gdx.scenes.scene2d.ui.Image _tutorialCloseImage -> p
    com.potatoandtomato.games.assets.MyAssets _assets -> q
    com.potatoandtomato.games.services.Texts _texts -> r
    com.potatoandtomato.common.GameCoordinator _gameCoordinator -> s
    com.badlogic.gdx.scenes.scene2d.ui.Image _pointLeftImage -> t
    com.badlogic.gdx.scenes.scene2d.ui.Image _pointRightImage -> u
    com.badlogic.gdx.scenes.scene2d.ui.Image _tutorialIcon -> v
    com.badlogic.gdx.scenes.scene2d.ui.Image _graveIcon -> w
    com.badlogic.gdx.scenes.scene2d.ui.Image tutorialButton -> x
    com.badlogic.gdx.scenes.scene2d.ui.Image graveButton -> y
    com.badlogic.gdx.scenes.scene2d.ui.Container _turnCountContainer -> z
    com.badlogic.gdx.scenes.scene2d.ui.Table _graveTable -> A
    com.badlogic.gdx.scenes.scene2d.ui.Table _tutorialTable -> B
    com.badlogic.gdx.scenes.scene2d.ui.Table _containerTable -> C
    com.potatoandtomato.games.services.SoundsWrapper _soundsWrapper -> D
    50:58:void <init>(com.potatoandtomato.common.GameCoordinator,com.potatoandtomato.games.services.Texts,com.potatoandtomato.games.assets.MyAssets,com.potatoandtomato.games.services.SoundsWrapper) -> <init>
    61:248:void populate() -> a
    251:282:com.badlogic.gdx.scenes.scene2d.Actor getTutorialDesign() -> b
    286:339:com.badlogic.gdx.scenes.scene2d.ui.Table getTutorialSegment(int) -> a
    343:357:void modelChanged(com.potatoandtomato.games.models.GraveModel) -> a
    360:367:void setCountDownTime(com.potatoandtomato.games.enums.ChessColor,java.lang.String) -> a
    370:397:void onBoardModelChanged(com.potatoandtomato.games.models.BoardModel) -> a
    400:405:void addToGraveyard(com.potatoandtomato.games.enums.ChessType,com.badlogic.gdx.scenes.scene2d.ui.Table) -> a
    408:436:void toggle(boolean) -> a
    439:449:void hide() -> c
    452:452:com.badlogic.gdx.scenes.scene2d.ui.Image getGraveButton() -> d
    456:456:com.badlogic.gdx.scenes.scene2d.ui.Image getTutorialButton() -> e
    460:460:com.badlogic.gdx.scenes.scene2d.ui.Image getGraveCloseImage() -> f
    464:464:com.badlogic.gdx.scenes.scene2d.ui.Image getTutorialCloseImage() -> g
    31:31:com.potatoandtomato.games.screens.GraveyardActor access$000(com.potatoandtomato.games.screens.GraveyardActor) -> a
    31:31:com.potatoandtomato.games.assets.MyAssets access$100(com.potatoandtomato.games.screens.GraveyardActor) -> b
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Table access$202(com.potatoandtomato.games.screens.GraveyardActor,com.badlogic.gdx.scenes.scene2d.ui.Table) -> a
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Table access$200(com.potatoandtomato.games.screens.GraveyardActor) -> c
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Label access$302(com.potatoandtomato.games.screens.GraveyardActor,com.badlogic.gdx.scenes.scene2d.ui.Label) -> a
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Label access$300(com.potatoandtomato.games.screens.GraveyardActor) -> d
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Label access$402(com.potatoandtomato.games.screens.GraveyardActor,com.badlogic.gdx.scenes.scene2d.ui.Label) -> b
    31:31:com.potatoandtomato.common.GameCoordinator access$500(com.potatoandtomato.games.screens.GraveyardActor) -> e
    31:31:com.potatoandtomato.games.services.Texts access$600(com.potatoandtomato.games.screens.GraveyardActor) -> f
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Label access$400(com.potatoandtomato.games.screens.GraveyardActor) -> g
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Label access$702(com.potatoandtomato.games.screens.GraveyardActor,com.badlogic.gdx.scenes.scene2d.ui.Label) -> c
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Label access$700(com.potatoandtomato.games.screens.GraveyardActor) -> h
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Table access$802(com.potatoandtomato.games.screens.GraveyardActor,com.badlogic.gdx.scenes.scene2d.ui.Table) -> b
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Table access$800(com.potatoandtomato.games.screens.GraveyardActor) -> i
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Label access$902(com.potatoandtomato.games.screens.GraveyardActor,com.badlogic.gdx.scenes.scene2d.ui.Label) -> d
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Label access$900(com.potatoandtomato.games.screens.GraveyardActor) -> j
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Label access$1002(com.potatoandtomato.games.screens.GraveyardActor,com.badlogic.gdx.scenes.scene2d.ui.Label) -> e
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Label access$1000(com.potatoandtomato.games.screens.GraveyardActor) -> k
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Label access$1102(com.potatoandtomato.games.screens.GraveyardActor,com.badlogic.gdx.scenes.scene2d.ui.Label) -> f
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Label access$1100(com.potatoandtomato.games.screens.GraveyardActor) -> l
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Label access$1202(com.potatoandtomato.games.screens.GraveyardActor,com.badlogic.gdx.scenes.scene2d.ui.Label) -> g
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Label access$1200(com.potatoandtomato.games.screens.GraveyardActor) -> m
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Label access$1302(com.potatoandtomato.games.screens.GraveyardActor,com.badlogic.gdx.scenes.scene2d.ui.Label) -> h
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Label access$1300(com.potatoandtomato.games.screens.GraveyardActor) -> n
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Container access$1402(com.potatoandtomato.games.screens.GraveyardActor,com.badlogic.gdx.scenes.scene2d.ui.Container) -> a
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Container access$1400(com.potatoandtomato.games.screens.GraveyardActor) -> o
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$1502(com.potatoandtomato.games.screens.GraveyardActor,com.badlogic.gdx.scenes.scene2d.ui.Image) -> a
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$1602(com.potatoandtomato.games.screens.GraveyardActor,com.badlogic.gdx.scenes.scene2d.ui.Image) -> b
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$1600(com.potatoandtomato.games.screens.GraveyardActor) -> p
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$1500(com.potatoandtomato.games.screens.GraveyardActor) -> q
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$1702(com.potatoandtomato.games.screens.GraveyardActor,com.badlogic.gdx.scenes.scene2d.ui.Image) -> c
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$1802(com.potatoandtomato.games.screens.GraveyardActor,com.badlogic.gdx.scenes.scene2d.ui.Image) -> d
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$1800(com.potatoandtomato.games.screens.GraveyardActor) -> r
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$1700(com.potatoandtomato.games.screens.GraveyardActor) -> s
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$1902(com.potatoandtomato.games.screens.GraveyardActor,com.badlogic.gdx.scenes.scene2d.ui.Image) -> e
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$2002(com.potatoandtomato.games.screens.GraveyardActor,com.badlogic.gdx.scenes.scene2d.ui.Image) -> f
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$1900(com.potatoandtomato.games.screens.GraveyardActor) -> t
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$2000(com.potatoandtomato.games.screens.GraveyardActor) -> u
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Table access$2102(com.potatoandtomato.games.screens.GraveyardActor,com.badlogic.gdx.scenes.scene2d.ui.Table) -> c
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Table access$2100(com.potatoandtomato.games.screens.GraveyardActor) -> v
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Table access$2202(com.potatoandtomato.games.screens.GraveyardActor,com.badlogic.gdx.scenes.scene2d.ui.Table) -> d
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Table access$2200(com.potatoandtomato.games.screens.GraveyardActor) -> w
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Label access$2302(com.potatoandtomato.games.screens.GraveyardActor,com.badlogic.gdx.scenes.scene2d.ui.Label) -> i
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Label access$2300(com.potatoandtomato.games.screens.GraveyardActor) -> x
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$2402(com.potatoandtomato.games.screens.GraveyardActor,com.badlogic.gdx.scenes.scene2d.ui.Image) -> g
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$2400(com.potatoandtomato.games.screens.GraveyardActor) -> y
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Table access$2502(com.potatoandtomato.games.screens.GraveyardActor,com.badlogic.gdx.scenes.scene2d.ui.Table) -> e
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Table access$2500(com.potatoandtomato.games.screens.GraveyardActor) -> z
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$2602(com.potatoandtomato.games.screens.GraveyardActor,com.badlogic.gdx.scenes.scene2d.ui.Image) -> h
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$2600(com.potatoandtomato.games.screens.GraveyardActor) -> A
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Table access$2702(com.potatoandtomato.games.screens.GraveyardActor,com.badlogic.gdx.scenes.scene2d.ui.Table) -> f
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Table access$2700(com.potatoandtomato.games.screens.GraveyardActor) -> B
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Table access$2802(com.potatoandtomato.games.screens.GraveyardActor,com.badlogic.gdx.scenes.scene2d.ui.Table) -> g
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Table access$2800(com.potatoandtomato.games.screens.GraveyardActor) -> C
    31:31:com.potatoandtomato.games.services.SoundsWrapper access$2900(com.potatoandtomato.games.screens.GraveyardActor) -> D
com.potatoandtomato.games.screens.GraveyardActor$1 -> com.potatoandtomato.games.screens.d$1:
    com.potatoandtomato.games.screens.GraveyardActor this$0 -> a
    61:61:void <init>(com.potatoandtomato.games.screens.GraveyardActor) -> <init>
    64:246:void run() -> run
com.potatoandtomato.games.screens.GraveyardActor$2 -> com.potatoandtomato.games.screens.d$2:
    com.potatoandtomato.games.models.GraveModel val$graveModel -> a
    com.potatoandtomato.games.screens.GraveyardActor this$0 -> b
    343:343:void <init>(com.potatoandtomato.games.screens.GraveyardActor,com.potatoandtomato.games.models.GraveModel) -> <init>
    346:355:void run() -> run
com.potatoandtomato.games.screens.GraveyardActor$3 -> com.potatoandtomato.games.screens.d$3:
    com.potatoandtomato.games.enums.ChessColor val$chessColor -> a
    java.lang.String val$time -> b
    com.potatoandtomato.games.screens.GraveyardActor this$0 -> c
    360:360:void <init>(com.potatoandtomato.games.screens.GraveyardActor,com.potatoandtomato.games.enums.ChessColor,java.lang.String) -> <init>
    363:365:void run() -> run
com.potatoandtomato.games.screens.GraveyardActor$4 -> com.potatoandtomato.games.screens.d$4:
    com.potatoandtomato.games.models.BoardModel val$boardModel -> a
    com.potatoandtomato.games.screens.GraveyardActor this$0 -> b
    370:370:void <init>(com.potatoandtomato.games.screens.GraveyardActor,com.potatoandtomato.games.models.BoardModel) -> <init>
    373:395:void run() -> run
com.potatoandtomato.games.screens.GraveyardActor$5 -> com.potatoandtomato.games.screens.d$5:
    boolean val$isGraveyard -> a
    com.potatoandtomato.games.screens.GraveyardActor this$0 -> b
    408:408:void <init>(com.potatoandtomato.games.screens.GraveyardActor,boolean) -> <init>
    411:434:void run() -> run
com.potatoandtomato.games.screens.GraveyardActor$6 -> com.potatoandtomato.games.screens.d$6:
    com.potatoandtomato.games.screens.GraveyardActor this$0 -> a
    439:439:void <init>(com.potatoandtomato.games.screens.GraveyardActor) -> <init>
    442:447:void run() -> run
com.potatoandtomato.games.screens.GraveyardLogic -> com.potatoandtomato.games.screens.e:
    com.potatoandtomato.games.models.GraveModel _graveModel -> a
    com.potatoandtomato.games.screens.GraveyardActor _graveyardActor -> b
    com.potatoandtomato.games.services.SoundsWrapper _soundsWrapper -> c
    boolean _handledSuddenDeath -> d
    com.potatoandtomato.common.utils.SafeThread _countDownThread -> e
    boolean _pauseTimer -> f
    com.potatoandtomato.games.enums.ChessColor _currentTurnChessColor -> g
    com.potatoandtomato.common.GameCoordinator _coordinator -> h
    com.potatoandtomato.games.models.Services _services -> i
    33:40:void <init>(com.potatoandtomato.games.models.GraveModel,com.potatoandtomato.common.GameCoordinator,com.potatoandtomato.games.services.Texts,com.potatoandtomato.games.assets.MyAssets,com.potatoandtomato.games.models.Services,com.potatoandtomato.games.services.SoundsWrapper) -> <init>
    43:44:void invalidate() -> a
    47:49:void addChessToGrave(com.potatoandtomato.games.enums.ChessType) -> a
    52:58:void onBoardModelChanged(com.potatoandtomato.games.models.BoardModel) -> a
    61:83:void setCountDownThread() -> b
    86:87:void setPauseTimer(boolean) -> a
    90:90:com.potatoandtomato.games.models.GraveModel getGraveModel() -> c
    94:96:void setGraveModel(com.potatoandtomato.games.models.GraveModel) -> a
    99:99:com.potatoandtomato.games.screens.GraveyardActor getGraveyardActor() -> d
    103:139:void setListener() -> e
    143:144:void dispose() -> dispose
    21:21:com.potatoandtomato.common.utils.SafeThread access$000(com.potatoandtomato.games.screens.GraveyardLogic) -> a
    21:21:boolean access$100(com.potatoandtomato.games.screens.GraveyardLogic) -> b
    21:21:com.potatoandtomato.games.enums.ChessColor access$200(com.potatoandtomato.games.screens.GraveyardLogic) -> c
    21:21:com.potatoandtomato.games.models.GraveModel access$300(com.potatoandtomato.games.screens.GraveyardLogic) -> d
    21:21:com.potatoandtomato.games.screens.GraveyardActor access$400(com.potatoandtomato.games.screens.GraveyardLogic) -> e
com.potatoandtomato.games.screens.GraveyardLogic$1 -> com.potatoandtomato.games.screens.e$1:
    com.potatoandtomato.games.screens.GraveyardLogic this$0 -> a
    62:62:void <init>(com.potatoandtomato.games.screens.GraveyardLogic) -> <init>
    66:81:void run() -> run
com.potatoandtomato.games.screens.GraveyardLogic$1$1 -> com.potatoandtomato.games.screens.e$1$1:
    com.potatoandtomato.games.screens.GraveyardLogic$1 this$1 -> a
    73:73:void <init>(com.potatoandtomato.games.screens.GraveyardLogic$1) -> <init>
    76:77:void run() -> run
com.potatoandtomato.games.screens.GraveyardLogic$2 -> com.potatoandtomato.games.screens.e$2:
    com.potatoandtomato.games.screens.GraveyardLogic this$0 -> a
    103:103:void <init>(com.potatoandtomato.games.screens.GraveyardLogic) -> <init>
    106:137:void run() -> run
com.potatoandtomato.games.screens.GraveyardLogic$2$1 -> com.potatoandtomato.games.screens.e$2$1:
    com.potatoandtomato.games.screens.GraveyardLogic$2 this$1 -> a
    106:106:void <init>(com.potatoandtomato.games.screens.GraveyardLogic$2) -> <init>
    109:111:void clicked(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float) -> clicked
com.potatoandtomato.games.screens.GraveyardLogic$2$2 -> com.potatoandtomato.games.screens.e$2$2:
    com.potatoandtomato.games.screens.GraveyardLogic$2 this$1 -> a
    114:114:void <init>(com.potatoandtomato.games.screens.GraveyardLogic$2) -> <init>
    117:119:void clicked(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float) -> clicked
com.potatoandtomato.games.screens.GraveyardLogic$2$3 -> com.potatoandtomato.games.screens.e$2$3:
    com.potatoandtomato.games.screens.GraveyardLogic$2 this$1 -> a
    122:122:void <init>(com.potatoandtomato.games.screens.GraveyardLogic$2) -> <init>
    125:127:void clicked(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float) -> clicked
com.potatoandtomato.games.screens.GraveyardLogic$2$4 -> com.potatoandtomato.games.screens.e$2$4:
    com.potatoandtomato.games.screens.GraveyardLogic$2 this$1 -> a
    130:130:void <init>(com.potatoandtomato.games.screens.GraveyardLogic$2) -> <init>
    133:135:void clicked(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float) -> clicked
com.potatoandtomato.games.screens.SplashActor -> com.potatoandtomato.games.screens.f:
    com.potatoandtomato.games.screens.SplashActor _this -> a
    com.potatoandtomato.common.assets.Assets _assets -> b
    com.potatoandtomato.games.services.Texts _texts -> c
    com.potatoandtomato.common.GameCoordinator _coordinator -> d
    35:40:void <init>(com.potatoandtomato.common.GameCoordinator,com.potatoandtomato.common.assets.Assets,com.potatoandtomato.games.services.Texts) -> <init>
    43:130:void populate() -> a
    133:144:void fadeOutActor(java.lang.Runnable) -> a
    28:28:com.potatoandtomato.common.assets.Assets access$000(com.potatoandtomato.games.screens.SplashActor) -> a
    28:28:com.potatoandtomato.games.screens.SplashActor access$100(com.potatoandtomato.games.screens.SplashActor) -> b
    28:28:com.potatoandtomato.games.services.Texts access$200(com.potatoandtomato.games.screens.SplashActor) -> c
    28:28:com.potatoandtomato.common.GameCoordinator access$300(com.potatoandtomato.games.screens.SplashActor) -> d
com.potatoandtomato.games.screens.SplashActor$1 -> com.potatoandtomato.games.screens.f$1:
    com.potatoandtomato.games.screens.SplashActor this$0 -> a
    43:43:void <init>(com.potatoandtomato.games.screens.SplashActor) -> <init>
    46:128:void run() -> run
com.potatoandtomato.games.screens.SplashActor$2 -> com.potatoandtomato.games.screens.f$2:
    java.lang.Runnable val$runnable -> a
    com.potatoandtomato.games.screens.SplashActor this$0 -> b
    133:133:void <init>(com.potatoandtomato.games.screens.SplashActor,java.lang.Runnable) -> <init>
    136:142:void run() -> run
com.potatoandtomato.games.screens.SplashActor$2$1 -> com.potatoandtomato.games.screens.f$2$1:
    com.potatoandtomato.games.screens.SplashActor$2 this$1 -> a
    136:136:void <init>(com.potatoandtomato.games.screens.SplashActor$2) -> <init>
    139:140:void run() -> run
com.potatoandtomato.games.screens.SplashLogic -> com.potatoandtomato.games.screens.g:
    com.potatoandtomato.games.screens.SplashActor _splashActor -> a
    com.potatoandtomato.games.models.Services _services -> b
    java.lang.Runnable _onFinish -> c
    boolean finished -> d
    19:24:void <init>(com.potatoandtomato.common.GameCoordinator,java.lang.Runnable,com.potatoandtomato.games.models.Services) -> <init>
    27:42:void newGame() -> a
    45:49:void continueGame() -> b
    52:52:com.potatoandtomato.games.screens.SplashActor getSplashActor() -> c
    56:56:boolean isFinished() -> d
    12:12:com.potatoandtomato.games.screens.SplashActor access$000(com.potatoandtomato.games.screens.SplashLogic) -> a
    12:12:com.potatoandtomato.games.models.Services access$100(com.potatoandtomato.games.screens.SplashLogic) -> b
    12:12:boolean access$202(com.potatoandtomato.games.screens.SplashLogic,boolean) -> a
    12:12:java.lang.Runnable access$300(com.potatoandtomato.games.screens.SplashLogic) -> c
com.potatoandtomato.games.screens.SplashLogic$1 -> com.potatoandtomato.games.screens.g$1:
    com.potatoandtomato.games.screens.SplashLogic this$0 -> a
    28:28:void <init>(com.potatoandtomato.games.screens.SplashLogic) -> <init>
    31:40:void run() -> run
com.potatoandtomato.games.screens.SplashLogic$1$1 -> com.potatoandtomato.games.screens.g$1$1:
    com.potatoandtomato.games.screens.SplashLogic$1 this$1 -> a
    31:31:void <init>(com.potatoandtomato.games.screens.SplashLogic$1) -> <init>
    34:38:void run() -> run
com.potatoandtomato.games.screens.TerrainActor -> com.potatoandtomato.games.screens.h:
    com.potatoandtomato.games.screens.TerrainActor _this -> a
    com.potatoandtomato.common.assets.Assets _assets -> b
    com.badlogic.gdx.scenes.scene2d.ui.Image _glowingTile -> c
    com.badlogic.gdx.scenes.scene2d.ui.Image _backgroundImage -> d
    boolean _selected -> e
    com.badlogic.gdx.scenes.scene2d.ui.Table _chessTable -> f
    com.badlogic.gdx.scenes.scene2d.ui.Table _greenTile -> g
    com.badlogic.gdx.scenes.scene2d.ui.Table _redTile -> h
    com.badlogic.gdx.scenes.scene2d.ui.Label _percentLabel -> i
    boolean _initialized -> j
    com.badlogic.gdx.scenes.scene2d.ui.Image _arrowLeft -> k
    com.badlogic.gdx.scenes.scene2d.ui.Image _arrowRight -> l
    com.badlogic.gdx.scenes.scene2d.ui.Image _arrowUp -> m
    com.badlogic.gdx.scenes.scene2d.ui.Image _arrowDown -> n
    com.badlogic.gdx.scenes.scene2d.ui.Image _arrowTopLeft -> o
    com.badlogic.gdx.scenes.scene2d.ui.Image _arrowTopRight -> p
    com.badlogic.gdx.scenes.scene2d.ui.Image _arrowBottomLeft -> q
    com.badlogic.gdx.scenes.scene2d.ui.Image _arrowBottomRight -> r
    com.badlogic.gdx.scenes.scene2d.ui.Image _crackImage -> s
    com.badlogic.gdx.scenes.scene2d.ui.Table _battleTable -> t
    com.potatoandtomato.games.services.SoundsWrapper _soundsWrapper -> u
    com.potatoandtomato.games.screens.ChessActor _chessActor -> v
    com.badlogic.gdx.scenes.scene2d.ui.Table root -> w
    49:56:void <init>(com.badlogic.gdx.scenes.scene2d.ui.Table,com.potatoandtomato.common.assets.Assets,com.potatoandtomato.games.screens.ChessActor,com.potatoandtomato.games.services.SoundsWrapper) -> <init>
    59:106:void populate(com.potatoandtomato.games.screens.ChessActor) -> a
    109:117:void setChessActor(com.potatoandtomato.games.screens.ChessActor) -> b
    120:144:void setSelected(boolean) -> a
    147:186:void showPercent(int,com.potatoandtomato.games.enums.Direction) -> a
    189:197:void hidePercent() -> a
    200:208:void hideAllArrows() -> g
    211:217:void showCanMoveTo() -> b
    220:226:void hideCanMoveTo() -> c
    229:244:void showBattle() -> d
    247:253:void hideBattle() -> e
    257:264:void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> draw
    267:347:void initializeArrows() -> h
    350:356:void initializeCrack() -> i
    359:371:void animateBroken() -> f
    374:387:void invalidate(com.potatoandtomato.games.models.TerrainModel) -> a
    31:31:com.potatoandtomato.games.screens.TerrainActor access$000(com.potatoandtomato.games.screens.TerrainActor) -> a
    31:31:com.potatoandtomato.common.assets.Assets access$100(com.potatoandtomato.games.screens.TerrainActor) -> b
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$202(com.potatoandtomato.games.screens.TerrainActor,com.badlogic.gdx.scenes.scene2d.ui.Image) -> a
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$200(com.potatoandtomato.games.screens.TerrainActor) -> c
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$302(com.potatoandtomato.games.screens.TerrainActor,com.badlogic.gdx.scenes.scene2d.ui.Image) -> b
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$300(com.potatoandtomato.games.screens.TerrainActor) -> d
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$402(com.potatoandtomato.games.screens.TerrainActor,com.badlogic.gdx.scenes.scene2d.ui.Image) -> c
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$400(com.potatoandtomato.games.screens.TerrainActor) -> e
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Table access$502(com.potatoandtomato.games.screens.TerrainActor,com.badlogic.gdx.scenes.scene2d.ui.Table) -> a
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Table access$500(com.potatoandtomato.games.screens.TerrainActor) -> f
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Table access$602(com.potatoandtomato.games.screens.TerrainActor,com.badlogic.gdx.scenes.scene2d.ui.Table) -> b
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Table access$600(com.potatoandtomato.games.screens.TerrainActor) -> g
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Table access$702(com.potatoandtomato.games.screens.TerrainActor,com.badlogic.gdx.scenes.scene2d.ui.Table) -> c
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Table access$700(com.potatoandtomato.games.screens.TerrainActor) -> h
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Label access$802(com.potatoandtomato.games.screens.TerrainActor,com.badlogic.gdx.scenes.scene2d.ui.Label) -> a
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Label access$800(com.potatoandtomato.games.screens.TerrainActor) -> i
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Table access$902(com.potatoandtomato.games.screens.TerrainActor,com.badlogic.gdx.scenes.scene2d.ui.Table) -> d
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Table access$900(com.potatoandtomato.games.screens.TerrainActor) -> j
    31:31:com.potatoandtomato.games.screens.ChessActor access$1002(com.potatoandtomato.games.screens.TerrainActor,com.potatoandtomato.games.screens.ChessActor) -> a
    31:31:boolean access$1100(com.potatoandtomato.games.screens.TerrainActor) -> k
    31:31:boolean access$1102(com.potatoandtomato.games.screens.TerrainActor,boolean) -> a
    31:31:void access$1200(com.potatoandtomato.games.screens.TerrainActor) -> l
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$1300(com.potatoandtomato.games.screens.TerrainActor) -> m
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$1400(com.potatoandtomato.games.screens.TerrainActor) -> n
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$1500(com.potatoandtomato.games.screens.TerrainActor) -> o
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$1600(com.potatoandtomato.games.screens.TerrainActor) -> p
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$1700(com.potatoandtomato.games.screens.TerrainActor) -> q
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$1800(com.potatoandtomato.games.screens.TerrainActor) -> r
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$1900(com.potatoandtomato.games.screens.TerrainActor) -> s
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$2000(com.potatoandtomato.games.screens.TerrainActor) -> t
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$1302(com.potatoandtomato.games.screens.TerrainActor,com.badlogic.gdx.scenes.scene2d.ui.Image) -> d
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Table access$2100(com.potatoandtomato.games.screens.TerrainActor) -> u
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$1502(com.potatoandtomato.games.screens.TerrainActor,com.badlogic.gdx.scenes.scene2d.ui.Image) -> e
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$1402(com.potatoandtomato.games.screens.TerrainActor,com.badlogic.gdx.scenes.scene2d.ui.Image) -> f
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$1602(com.potatoandtomato.games.screens.TerrainActor,com.badlogic.gdx.scenes.scene2d.ui.Image) -> g
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$1702(com.potatoandtomato.games.screens.TerrainActor,com.badlogic.gdx.scenes.scene2d.ui.Image) -> h
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$1802(com.potatoandtomato.games.screens.TerrainActor,com.badlogic.gdx.scenes.scene2d.ui.Image) -> i
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$2002(com.potatoandtomato.games.screens.TerrainActor,com.badlogic.gdx.scenes.scene2d.ui.Image) -> j
    31:31:com.badlogic.gdx.scenes.scene2d.ui.Image access$1902(com.potatoandtomato.games.screens.TerrainActor,com.badlogic.gdx.scenes.scene2d.ui.Image) -> k
    31:31:com.potatoandtomato.games.screens.ChessActor access$1000(com.potatoandtomato.games.screens.TerrainActor) -> v
com.potatoandtomato.games.screens.TerrainActor$1 -> com.potatoandtomato.games.screens.h$1:
    com.potatoandtomato.games.screens.ChessActor val$chessActor -> a
    com.potatoandtomato.games.screens.TerrainActor this$0 -> b
    59:59:void <init>(com.potatoandtomato.games.screens.TerrainActor,com.potatoandtomato.games.screens.ChessActor) -> <init>
    62:104:void run() -> run
com.potatoandtomato.games.screens.TerrainActor$10 -> com.potatoandtomato.games.screens.h$2:
    com.potatoandtomato.games.screens.TerrainActor this$0 -> a
    267:267:void <init>(com.potatoandtomato.games.screens.TerrainActor) -> <init>
    270:345:void run() -> run
com.potatoandtomato.games.screens.TerrainActor$11 -> com.potatoandtomato.games.screens.h$3:
    com.potatoandtomato.games.screens.TerrainActor this$0 -> a
    350:350:void <init>(com.potatoandtomato.games.screens.TerrainActor) -> <init>
    353:354:void run() -> run
com.potatoandtomato.games.screens.TerrainActor$12 -> com.potatoandtomato.games.screens.h$4:
    com.potatoandtomato.games.screens.TerrainActor this$0 -> a
    359:359:void <init>(com.potatoandtomato.games.screens.TerrainActor) -> <init>
    362:369:void run() -> run
com.potatoandtomato.games.screens.TerrainActor$12$1 -> com.potatoandtomato.games.screens.h$4$1:
    com.potatoandtomato.games.screens.TerrainActor$12 this$1 -> a
    363:363:void <init>(com.potatoandtomato.games.screens.TerrainActor$12) -> <init>
    366:367:void run() -> run
com.potatoandtomato.games.screens.TerrainActor$13 -> com.potatoandtomato.games.screens.h$5:
    com.potatoandtomato.games.models.TerrainModel val$model -> a
    com.potatoandtomato.games.screens.TerrainActor this$0 -> b
    374:374:void <init>(com.potatoandtomato.games.screens.TerrainActor,com.potatoandtomato.games.models.TerrainModel) -> <init>
    377:385:void run() -> run
com.potatoandtomato.games.screens.TerrainActor$2 -> com.potatoandtomato.games.screens.h$6:
    com.potatoandtomato.games.screens.ChessActor val$chessActor -> a
    com.potatoandtomato.games.screens.TerrainActor this$0 -> b
    109:109:void <init>(com.potatoandtomato.games.screens.TerrainActor,com.potatoandtomato.games.screens.ChessActor) -> <init>
    112:115:void run() -> run
com.potatoandtomato.games.screens.TerrainActor$3 -> com.potatoandtomato.games.screens.h$7:
    boolean val$selected -> a
    com.potatoandtomato.games.screens.TerrainActor this$0 -> b
    120:120:void <init>(com.potatoandtomato.games.screens.TerrainActor,boolean) -> <init>
    123:142:void run() -> run
com.potatoandtomato.games.screens.TerrainActor$3$1 -> com.potatoandtomato.games.screens.h$7$1:
    com.potatoandtomato.games.screens.TerrainActor$3 this$1 -> a
    134:134:void <init>(com.potatoandtomato.games.screens.TerrainActor$3) -> <init>
    137:138:void run() -> run
com.potatoandtomato.games.screens.TerrainActor$4 -> com.potatoandtomato.games.screens.h$8:
    int val$percent -> a
    com.potatoandtomato.games.enums.Direction val$direction -> b
    com.potatoandtomato.games.screens.TerrainActor this$0 -> c
    147:147:void <init>(com.potatoandtomato.games.screens.TerrainActor,int,com.potatoandtomato.games.enums.Direction) -> <init>
    150:184:void run() -> run
com.potatoandtomato.games.screens.TerrainActor$5 -> com.potatoandtomato.games.screens.h$9:
    com.potatoandtomato.games.screens.TerrainActor this$0 -> a
    189:189:void <init>(com.potatoandtomato.games.screens.TerrainActor) -> <init>
    192:195:void run() -> run
com.potatoandtomato.games.screens.TerrainActor$6 -> com.potatoandtomato.games.screens.h$10:
    com.potatoandtomato.games.screens.TerrainActor this$0 -> a
    211:211:void <init>(com.potatoandtomato.games.screens.TerrainActor) -> <init>
    214:215:void run() -> run
com.potatoandtomato.games.screens.TerrainActor$7 -> com.potatoandtomato.games.screens.h$11:
    com.potatoandtomato.games.screens.TerrainActor this$0 -> a
    220:220:void <init>(com.potatoandtomato.games.screens.TerrainActor) -> <init>
    223:224:void run() -> run
com.potatoandtomato.games.screens.TerrainActor$8 -> com.potatoandtomato.games.screens.h$12:
    com.potatoandtomato.games.screens.TerrainActor this$0 -> a
    229:229:void <init>(com.potatoandtomato.games.screens.TerrainActor) -> <init>
    232:242:void run() -> run
com.potatoandtomato.games.screens.TerrainActor$9 -> com.potatoandtomato.games.screens.h$13:
    com.potatoandtomato.games.screens.TerrainActor this$0 -> a
    247:247:void <init>(com.potatoandtomato.games.screens.TerrainActor) -> <init>
    250:251:void run() -> run
com.potatoandtomato.games.screens.TerrainLogic -> com.potatoandtomato.games.screens.i:
    com.potatoandtomato.games.models.TerrainModel _terrainModel -> a
    com.potatoandtomato.games.screens.TerrainLogic _me -> b
    com.potatoandtomato.games.assets.MyAssets _assets -> c
    com.potatoandtomato.games.screens.TerrainActor terrainActor -> d
    com.potatoandtomato.games.screens.ChessLogic chessLogic -> e
    com.potatoandtomato.games.absint.ActionListener actionListener -> f
    com.potatoandtomato.common.GameCoordinator _coordinator -> g
    com.potatoandtomato.games.references.BattleRef _battleRefs -> h
    com.potatoandtomato.games.services.GameDataController _gameDataController -> i
    com.potatoandtomato.games.services.SoundsWrapper _soundsWrapper -> j
    53:66:void <init>(com.badlogic.gdx.scenes.scene2d.ui.Table,com.potatoandtomato.games.models.TerrainModel,com.potatoandtomato.games.assets.MyAssets,com.potatoandtomato.common.GameCoordinator,com.potatoandtomato.games.models.ChessModel,com.potatoandtomato.games.services.SoundsWrapper,com.potatoandtomato.games.services.GameDataController,com.potatoandtomato.games.references.BattleRef) -> <init>
    70:168:void moveChessToThis(com.potatoandtomato.games.screens.TerrainLogic,boolean,boolean,java.lang.String) -> a
    171:177:void openTerrainChess(java.lang.String) -> a
    182:222:void showPercentTile(com.potatoandtomato.games.screens.TerrainLogic) -> a
    225:229:void hidePercentTile() -> a
    232:233:void showCanMoveTo() -> b
    236:237:void hideCanMoveTo() -> c
    240:246:void setSelected(boolean) -> a
    249:271:void setDragAndDrop(java.util.ArrayList) -> a
    275:275:boolean isEmpty() -> d
    279:279:boolean isOpened() -> e
    283:283:com.potatoandtomato.games.screens.TerrainActor getTerrainActor() -> f
    287:287:boolean isSelected() -> g
    291:304:void setListeners() -> h
    307:307:com.potatoandtomato.games.models.TerrainModel getTerrainModel() -> i
    311:311:com.potatoandtomato.games.screens.ChessLogic getChessLogic() -> j
    315:318:void setActionListener(com.potatoandtomato.games.absint.ActionListener) -> a
    321:322:void invalidate() -> k
    36:36:com.potatoandtomato.games.services.SoundsWrapper access$000(com.potatoandtomato.games.screens.TerrainLogic) -> b
    36:36:com.potatoandtomato.games.screens.ChessLogic access$100(com.potatoandtomato.games.screens.TerrainLogic) -> c
    36:36:com.potatoandtomato.games.absint.ActionListener access$200(com.potatoandtomato.games.screens.TerrainLogic) -> d
    36:36:com.potatoandtomato.games.screens.TerrainLogic access$300(com.potatoandtomato.games.screens.TerrainLogic) -> e
    36:36:com.potatoandtomato.common.GameCoordinator access$400(com.potatoandtomato.games.screens.TerrainLogic) -> f
    36:36:com.potatoandtomato.games.references.BattleRef access$500(com.potatoandtomato.games.screens.TerrainLogic) -> g
    36:36:com.potatoandtomato.games.services.GameDataController access$600(com.potatoandtomato.games.screens.TerrainLogic) -> h
    36:36:com.potatoandtomato.games.models.TerrainModel access$700(com.potatoandtomato.games.screens.TerrainLogic) -> i
com.potatoandtomato.games.screens.TerrainLogic$1 -> com.potatoandtomato.games.screens.i$1:
    com.potatoandtomato.games.models.ChessModel val$originalFromChessModel -> a
    com.potatoandtomato.games.models.ChessModel val$originalToChessModel -> b
    java.lang.String val$random -> c
    boolean val$isFromWon -> d
    com.badlogic.gdx.scenes.scene2d.Actor val$originalFromChessClone -> e
    com.potatoandtomato.games.screens.TerrainLogic this$0 -> f
    74:74:void <init>(com.potatoandtomato.games.screens.TerrainLogic,com.potatoandtomato.games.models.ChessModel,com.potatoandtomato.games.models.ChessModel,java.lang.String,boolean,com.badlogic.gdx.scenes.scene2d.Actor) -> <init>
    78:141:void run() -> run
com.potatoandtomato.games.screens.TerrainLogic$1$1 -> com.potatoandtomato.games.screens.i$1$1:
    com.badlogic.gdx.scenes.scene2d.Actor val$clone -> a
    com.badlogic.gdx.scenes.scene2d.Stage val$_stage -> b
    boolean val$loserIsYellow -> c
    com.potatoandtomato.games.enums.ChessType val$winnerChessType -> d
    com.potatoandtomato.games.enums.ChessType val$loserChessType -> e
    com.potatoandtomato.games.screens.TerrainLogic$1 this$1 -> f
    114:114:void <init>(com.potatoandtomato.games.screens.TerrainLogic$1,com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Stage,boolean,com.potatoandtomato.games.enums.ChessType,com.potatoandtomato.games.enums.ChessType) -> <init>
    117:136:void run() -> run
com.potatoandtomato.games.screens.TerrainLogic$1$1$1 -> com.potatoandtomato.games.screens.i$1$1$1:
    com.potatoandtomato.games.screens.TerrainLogic$1$1 this$2 -> a
    126:126:void <init>(com.potatoandtomato.games.screens.TerrainLogic$1$1) -> <init>
    129:133:void run() -> run
com.potatoandtomato.games.screens.TerrainLogic$2 -> com.potatoandtomato.games.screens.i$2:
    com.badlogic.gdx.scenes.scene2d.Actor val$clone -> a
    java.lang.Runnable val$afterMove -> b
    com.potatoandtomato.games.screens.TerrainLogic this$0 -> c
    154:154:void <init>(com.potatoandtomato.games.screens.TerrainLogic,com.badlogic.gdx.scenes.scene2d.Actor,java.lang.Runnable) -> <init>
    157:159:void run() -> run
com.potatoandtomato.games.screens.TerrainLogic$3 -> com.potatoandtomato.games.screens.i$3:
    java.lang.String val$random -> a
    com.potatoandtomato.games.screens.TerrainLogic this$0 -> b
    171:171:void <init>(com.potatoandtomato.games.screens.TerrainLogic,java.lang.String) -> <init>
    174:175:void run() -> run
com.potatoandtomato.games.screens.TerrainLogic$4 -> com.potatoandtomato.games.screens.i$4:
    com.potatoandtomato.games.screens.TerrainLogic val$terrainLogic -> a
    com.potatoandtomato.games.screens.TerrainLogic this$0 -> b
    251:251:void <init>(com.potatoandtomato.games.screens.TerrainLogic,com.badlogic.gdx.scenes.scene2d.Actor,com.potatoandtomato.games.screens.TerrainLogic) -> <init>
    253:254:boolean drag(com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source,com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload,float,float,int) -> drag
    258:259:void reset(com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source,com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload) -> reset
    262:267:void drop(com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source,com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload,float,float,int) -> drop
com.potatoandtomato.games.screens.TerrainLogic$5 -> com.potatoandtomato.games.screens.i$5:
    com.potatoandtomato.games.screens.TerrainLogic this$0 -> a
    291:291:void <init>(com.potatoandtomato.games.screens.TerrainLogic) -> <init>
    294:300:boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> touchDown
com.potatoandtomato.games.services.Database -> com.potatoandtomato.games.f.a:
    com.potatoandtomato.common.GameCoordinator _coordinator -> a
    com.firebase.client.Firebase _ref -> b
    23:26:void <init>(com.potatoandtomato.common.GameCoordinator) -> <init>
    29:29:com.firebase.client.Firebase getInfoTable() -> a
    33:33:com.firebase.client.Firebase getMatchHistoriesTable() -> b
    37:38:void saveGameData(java.lang.String) -> a
    41:56:void getGameData(com.potatoandtomato.games.absint.DatabaseListener) -> a
    59:60:void getLastMatchHistories(java.lang.String,int,com.potatoandtomato.games.absint.DatabaseListener) -> a
    63:65:void getHeadToHeadMatchHistories(java.lang.String,java.lang.String,com.potatoandtomato.games.absint.DatabaseListener) -> a
    68:101:void saveMatchHistory(java.lang.String,java.lang.String,com.potatoandtomato.games.absint.DatabaseListener) -> b
    104:111:void saveSingleUserMatchHistory(java.lang.String,com.potatoandtomato.games.models.MatchHistory,com.potatoandtomato.games.absint.DatabaseListener) -> a
    115:131:void getData(com.firebase.client.Query,com.potatoandtomato.games.absint.DatabaseListener) -> a
    17:17:void access$000(com.potatoandtomato.games.services.Database,java.lang.String,com.potatoandtomato.games.models.MatchHistory,com.potatoandtomato.games.absint.DatabaseListener) -> a
com.potatoandtomato.games.services.Database$1 -> com.potatoandtomato.games.f.a$1:
    com.potatoandtomato.games.absint.DatabaseListener val$listener -> a
    com.potatoandtomato.games.services.Database this$0 -> b
    41:41:void <init>(com.potatoandtomato.games.services.Database,com.potatoandtomato.games.absint.DatabaseListener) -> <init>
    44:49:void onDataChange(com.firebase.client.DataSnapshot) -> onDataChange
    53:54:void onCancelled(com.firebase.client.FirebaseError) -> onCancelled
com.potatoandtomato.games.services.Database$2 -> com.potatoandtomato.games.f.a$2:
    java.lang.String val$loserUserId -> a
    java.lang.String val$winnerUserId -> b
    com.potatoandtomato.games.absint.DatabaseListener val$listener -> c
    com.potatoandtomato.games.services.Database this$0 -> d
    68:68:void <init>(com.potatoandtomato.games.services.Database,java.lang.String,java.lang.String,com.potatoandtomato.games.absint.DatabaseListener) -> <init>
    71:99:void run() -> run
com.potatoandtomato.games.services.Database$2$1 -> com.potatoandtomato.games.f.a$2$1:
    com.potatoandtomato.common.utils.Threadings$ThreadFragment val$fragment1 -> a
    com.potatoandtomato.games.services.Database$2 this$1 -> b
    76:76:void <init>(com.potatoandtomato.games.services.Database$2,com.potatoandtomato.common.utils.Threadings$ThreadFragment) -> <init>
    79:80:void onCallback(java.lang.Object,com.potatoandtomato.common.enums.Status) -> a
com.potatoandtomato.games.services.Database$2$2 -> com.potatoandtomato.games.f.a$2$2:
    com.potatoandtomato.common.utils.Threadings$ThreadFragment val$fragment2 -> a
    com.potatoandtomato.games.services.Database$2 this$1 -> b
    85:85:void <init>(com.potatoandtomato.games.services.Database$2,com.potatoandtomato.common.utils.Threadings$ThreadFragment) -> <init>
    88:89:void onCallback(java.lang.Object,com.potatoandtomato.common.enums.Status) -> a
com.potatoandtomato.games.services.Database$3 -> com.potatoandtomato.games.f.a$3:
    com.potatoandtomato.games.absint.DatabaseListener val$listener -> a
    com.potatoandtomato.games.services.Database this$0 -> b
    105:105:void <init>(com.potatoandtomato.games.services.Database,com.potatoandtomato.games.absint.DatabaseListener) -> <init>
    108:109:void onComplete(com.firebase.client.FirebaseError,com.firebase.client.Firebase) -> onComplete
com.potatoandtomato.games.services.Database$4 -> com.potatoandtomato.games.f.a$4:
    com.potatoandtomato.games.absint.DatabaseListener val$listener -> a
    com.potatoandtomato.games.services.Database this$0 -> b
    115:115:void <init>(com.potatoandtomato.games.services.Database,com.potatoandtomato.games.absint.DatabaseListener) -> <init>
    118:125:void onDataChange(com.firebase.client.DataSnapshot) -> onDataChange
    128:129:void onCancelled(com.firebase.client.FirebaseError) -> onCancelled
com.potatoandtomato.games.services.GameDataController -> com.potatoandtomato.games.f.b:
    com.potatoandtomato.common.GameCoordinator _coordinator -> a
    int firstTurnIndex -> b
    20:24:void <init>(com.potatoandtomato.common.GameCoordinator) -> <init>
    27:32:int getFirstTurnIndex() -> a
    36:65:java.util.ArrayList getGameData() -> b
    69:70:com.potatoandtomato.games.enums.ChessColor getMyChessColor() -> c
    74:75:com.potatoandtomato.games.enums.ChessColor getEnemyChessColor() -> d
com.potatoandtomato.games.services.ScoresHandler -> com.potatoandtomato.games.f.c:
    com.potatoandtomato.games.services.GameDataController gameDataController -> m
    com.potatoandtomato.common.GameCoordinator coordinator -> n
    com.potatoandtomato.games.screens.BoardLogic boardLogic -> o
    com.potatoandtomato.games.services.Database database -> p
    com.potatoandtomato.games.services.Texts texts -> q
    com.potatoandtomato.common.models.Team winnerTeam -> r
    com.potatoandtomato.common.models.Team loserTeam -> s
    com.potatoandtomato.games.enums.ChessColor winnerColor -> t
    com.potatoandtomato.games.enums.ChessColor loserColor -> u
    java.util.HashMap headToHeadMatchHistories -> v
    java.util.HashMap lastMatchHistories -> w
    boolean dataReady -> a
    boolean disposed -> x
    int CATCH_UP_TRIGGERING_LOSE_STREAK_COUNT -> b
    int EZ_WIN_TRIGGERING_TIME_LEFT -> c
    int EZ_WIN_TRIGGERING_TURN_COUNT -> d
    int PAWN_LEADERBOARD_TRIGGERING_RANK -> e
    double KILL_STREAK_MULTIPLIER -> f
    double CATCH_UP_MULTIPLIER -> g
    double EASY_WIN -> h
    double NORMAL_WIN -> i
    double HARD_WIN -> j
    double PAWN_LEADERBOARD_OPPONENT -> k
    double FIRST_TIME_WIN_THIS_OPPONENT -> l
    55:64:void <init>(com.potatoandtomato.common.GameCoordinator,com.potatoandtomato.games.services.Database,com.potatoandtomato.games.services.Texts,com.potatoandtomato.games.services.GameDataController) -> <init>
    67:68:void setBoardLogic(com.potatoandtomato.games.screens.BoardLogic) -> a
    72:142:void populateData() -> a
    145:163:void setIsMeWin(boolean) -> a
    166:170:void updateMatchHistory() -> b
    173:210:void process(com.potatoandtomato.games.absint.ScoresListener) -> a
    213:284:double getMultiply(java.util.ArrayList,boolean) -> a
    296:307:boolean checkWinSituation(java.util.ArrayList,com.potatoandtomato.games.models.BoardModel,com.potatoandtomato.games.models.GraveModel) -> a
    314:345:void checkOtherSpecialCases(java.util.ArrayList) -> a
    349:351:java.util.HashMap getWinnerResult(java.util.ArrayList) -> b
    355:357:java.util.ArrayList getLoser() -> g
    361:361:java.lang.String getWinnerUserId() -> c
    365:365:java.lang.String getLoserUserId() -> d
    369:370:com.potatoandtomato.common.models.Streak getWinnerStreak() -> e
    374:375:com.potatoandtomato.common.models.Streak getLoserStreak() -> f
    380:381:void dispose() -> dispose
    385:386:void setLastMatchHistories(java.util.HashMap) -> a
    389:390:void setHeadToHeadMatchHistories(java.util.HashMap) -> b
    29:29:java.util.HashMap access$000(com.potatoandtomato.games.services.ScoresHandler) -> a
    29:29:com.potatoandtomato.games.services.Database access$100(com.potatoandtomato.games.services.ScoresHandler) -> b
    29:29:java.util.HashMap access$200(com.potatoandtomato.games.services.ScoresHandler) -> c
    29:29:boolean access$300(com.potatoandtomato.games.services.ScoresHandler) -> d
    29:29:com.potatoandtomato.common.GameCoordinator access$400(com.potatoandtomato.games.services.ScoresHandler) -> e
    29:29:com.potatoandtomato.games.enums.ChessColor access$500(com.potatoandtomato.games.services.ScoresHandler) -> f
    29:29:com.potatoandtomato.games.services.GameDataController access$600(com.potatoandtomato.games.services.ScoresHandler) -> g
    29:29:com.potatoandtomato.games.services.Texts access$700(com.potatoandtomato.games.services.ScoresHandler) -> h
    29:29:java.util.HashMap access$800(com.potatoandtomato.games.services.ScoresHandler,java.util.ArrayList) -> a
    29:29:com.potatoandtomato.games.screens.BoardLogic access$900(com.potatoandtomato.games.services.ScoresHandler) -> i
    29:29:void access$1000(com.potatoandtomato.games.services.ScoresHandler,java.util.ArrayList) -> b
    29:29:java.util.ArrayList access$1100(com.potatoandtomato.games.services.ScoresHandler) -> j
com.potatoandtomato.games.services.ScoresHandler$1 -> com.potatoandtomato.games.f.c$1:
    java.lang.String val$userAId -> a
    java.lang.String val$userBId -> b
    com.potatoandtomato.games.services.ScoresHandler this$0 -> c
    79:79:void <init>(com.potatoandtomato.games.services.ScoresHandler,java.lang.String,java.lang.String) -> <init>
    82:139:void run() -> run
com.potatoandtomato.games.services.ScoresHandler$1$1 -> com.potatoandtomato.games.f.c$1$1:
    com.potatoandtomato.common.utils.Threadings$ThreadFragment val$fragment1 -> a
    com.potatoandtomato.games.services.ScoresHandler$1 this$1 -> b
    85:85:void <init>(com.potatoandtomato.games.services.ScoresHandler$1,java.lang.Class,com.potatoandtomato.common.utils.Threadings$ThreadFragment) -> <init>
    88:92:void onCallback(java.util.ArrayList,com.potatoandtomato.common.enums.Status) -> a
    85:85:void onCallback(java.lang.Object,com.potatoandtomato.common.enums.Status) -> a
com.potatoandtomato.games.services.ScoresHandler$1$2 -> com.potatoandtomato.games.f.c$1$2:
    com.potatoandtomato.common.utils.Threadings$ThreadFragment val$fragment2 -> a
    com.potatoandtomato.games.services.ScoresHandler$1 this$1 -> b
    98:98:void <init>(com.potatoandtomato.games.services.ScoresHandler$1,java.lang.Class,com.potatoandtomato.common.utils.Threadings$ThreadFragment) -> <init>
    101:105:void onCallback(java.util.ArrayList,com.potatoandtomato.common.enums.Status) -> a
    98:98:void onCallback(java.lang.Object,com.potatoandtomato.common.enums.Status) -> a
com.potatoandtomato.games.services.ScoresHandler$1$3 -> com.potatoandtomato.games.f.c$1$3:
    com.potatoandtomato.common.utils.Threadings$ThreadFragment val$fragment3 -> a
    com.potatoandtomato.games.services.ScoresHandler$1 this$1 -> b
    110:110:void <init>(com.potatoandtomato.games.services.ScoresHandler$1,java.lang.Class,com.potatoandtomato.common.utils.Threadings$ThreadFragment) -> <init>
    113:117:void onCallback(java.util.ArrayList,com.potatoandtomato.common.enums.Status) -> a
    110:110:void onCallback(java.lang.Object,com.potatoandtomato.common.enums.Status) -> a
com.potatoandtomato.games.services.ScoresHandler$1$4 -> com.potatoandtomato.games.f.c$1$4:
    com.potatoandtomato.common.utils.Threadings$ThreadFragment val$fragment4 -> a
    com.potatoandtomato.games.services.ScoresHandler$1 this$1 -> b
    122:122:void <init>(com.potatoandtomato.games.services.ScoresHandler$1,java.lang.Class,com.potatoandtomato.common.utils.Threadings$ThreadFragment) -> <init>
    125:129:void onCallback(java.util.ArrayList,com.potatoandtomato.common.enums.Status) -> a
    122:122:void onCallback(java.lang.Object,com.potatoandtomato.common.enums.Status) -> a
com.potatoandtomato.games.services.ScoresHandler$2 -> com.potatoandtomato.games.f.c$2:
    com.potatoandtomato.games.absint.ScoresListener val$listener -> a
    com.potatoandtomato.games.services.ScoresHandler this$0 -> b
    173:173:void <init>(com.potatoandtomato.games.services.ScoresHandler,com.potatoandtomato.games.absint.ScoresListener) -> <init>
    177:208:void run() -> run
com.potatoandtomato.games.services.SoundsWrapper -> com.potatoandtomato.games.f.d:
    com.potatoandtomato.common.assets.Assets _assets -> a
    com.potatoandtomato.common.GameCoordinator _coordinator -> b
    com.badlogic.gdx.audio.Music _themeMusic -> c
    com.badlogic.gdx.audio.Music _themeSuddenDMusic -> d
    21:31:void <init>(com.potatoandtomato.common.assets.Assets,com.potatoandtomato.common.GameCoordinator) -> <init>
    34:35:void playTheme() -> a
    38:39:void playThemeMusicSuddenD() -> b
    43:45:void stopTheme() -> c
    48:50:void playSounds(com.potatoandtomato.games.assets.Sounds$Name) -> a
    53:55:void playAnimalSound(com.potatoandtomato.games.enums.ChessAnimal) -> a
    59:60:void dispose() -> dispose
com.potatoandtomato.games.services.Texts -> com.potatoandtomato.games.f.e:
    9:9:void <init>() -> <init>
    12:12:java.lang.String yourTurn() -> a
    16:16:java.lang.String enemyTurn() -> b
    20:20:java.lang.String graveYard() -> c
    24:24:java.lang.String tutorial() -> d
    28:28:java.lang.String gameStart() -> e
    32:32:java.lang.String youWin() -> f
    36:36:java.lang.String youLose() -> g
    40:40:java.lang.String you() -> h
    44:44:java.lang.String enemy() -> i
    48:48:java.lang.String vs() -> j
    52:52:java.lang.String timeToCatchUp() -> k
    56:56:java.lang.String xWinStreak() -> l
    60:60:java.lang.String breakEnemyXWinStreak() -> m
    64:64:java.lang.String easyWin() -> n
    69:69:java.lang.String normalWin() -> o
    73:73:java.lang.String firstTimeWinPlayer() -> p
    77:77:java.lang.String pawnLeaderboardPlayer() -> q
    81:81:java.lang.String beatBot() -> r
    89:89:java.lang.String tutorialAboutFoodChain() -> s
    93:93:java.lang.String tutorialAboutSwipeOpen() -> t
    97:97:java.lang.String tutorialAboutDrag() -> u
    101:101:java.lang.String tutorialAboutPoison() -> v
    105:105:java.lang.String tutorialAboutAttackUp() -> w
    109:109:java.lang.String tutorialAboutAttackDown() -> x
    113:113:java.lang.String tutorialAboutParalyzed() -> y
    117:117:java.lang.String tutorialAboutKing() -> z
    121:121:java.lang.String tutorialAboutAggressive() -> A
    125:125:java.lang.String tutorialEnd() -> B
    133:133:java.lang.String onScreenTutorialDragToMove() -> C
    137:137:java.lang.String onScreenTutorialSeeMore() -> D
    141:141:java.lang.String onScreenTutorialSwipeToOpen() -> E
    145:145:java.lang.String tutorialAboutGameMsg() -> F
    152:157:java.lang.String getRandomBotName() -> G
com.potatoandtomato.games.statics.Global -> com.potatoandtomato.games.g.a:
    boolean DEBUG -> a
    boolean NO_ENTRANCE -> b
    boolean BOT_MATCH -> c
    int ANIMATION_COUNT -> d
    8:8:void <init>() -> <init>
    16:19:void increaseAnimationCount() -> a
    22:25:void decreaseAnimationCount() -> b
    10:12:void <clinit>() -> <clinit>
com.potatoandtomato.games.statics.Terms -> com.potatoandtomato.games.g.b:
    java.lang.String TUTORIAL_MOVE -> a
    java.lang.String TUTORIAL_OPEN -> b
    java.lang.String TUTORIAL_CONCLUDE -> c
    6:6:void <init>() -> <init>
    8:10:void <clinit>() -> <clinit>
